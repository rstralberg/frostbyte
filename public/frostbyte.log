11:29:27 sql: select * from `config` where id=1
11:29:27 sql: select * from `user` where `username`='admin'
11:29:27 sql: select `id`,`title` from `page` where `parent`=NULL
11:29:27 sql: select * from `page` where id=1
11:29:27 sql: select `id`,`type` from `section` where page_id=1
11:29:27 sql: select * from `section` where id=1
11:29:27 sql: select * from `section` where id=2
11:29:29 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
11:29:31 sql: update `section` set `height`=20,`order`=0,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
11:30:19 sql: select * from `config` where id=1
11:30:19 sql: select * from `user` where `username`='admin'
11:30:19 sql: select `id`,`title` from `page` where `parent`=NULL
11:30:19 sql: select * from `page` where id=1
11:30:19 sql: select `id`,`type` from `section` where page_id=1
11:30:19 sql: select * from `section` where id=1
11:30:19 sql: select * from `section` where id=2
11:30:21 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
11:32:50 sql: select * from `config` where id=1
11:32:51 sql: select * from `user` where `username`='admin'
11:32:51 sql: select `id`,`title` from `page` where `parent`=NULL
11:32:51 sql: select * from `page` where id=1
11:32:51 sql: select `id`,`type` from `section` where page_id=1
11:32:51 sql: select * from `section` where id=1
11:32:51 sql: select * from `section` where id=2
11:32:52 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
11:32:54 sql: update `section` set `height`=25,`order`=0,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":0,"align":"left"}' where id=2
11:33:01 sql: update `section` set `height`=25,`order`=0,`content`='{"align":"left","text":"%3Cfigure%20style%3D%22height%3A%20223px%3B%22%3E%3Cimg%20src%3D%22http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg%22%20style%3D%22width%3A%20177px%3B%20height%3A%20177px%3B%20margin-top%3A%208px%3B%22%3E%3Cfigcaption%20style%3D%22text-align%3A%20left%3B%22%3ERoland%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=2
11:33:05 null: NULL object
11:33:06 sql: update `section` set `height`=25,`order`=1,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":0,"align":"left"}' where id=2
11:33:07 sql: update `section` set `height`=25,`order`=1,`content`='{"align":"left","text":"%3Cfigure%20style%3D%22height%3A%20223px%3B%22%3E%3Cimg%20src%3D%22http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg%22%20style%3D%22width%3A%20177px%3B%20height%3A%20177px%3B%20margin-top%3A%208px%3B%22%3E%3Cfigcaption%20style%3D%22text-align%3A%20left%3B%22%3ERoland%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=2
11:33:09 sql: update `section` set `height`=20,`order`=0,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
11:33:11 sql: select * from `config` where id=1
11:33:11 sql: select * from `user` where `username`='admin'
11:33:11 sql: select `id`,`title` from `page` where `parent`=NULL
11:33:11 sql: select * from `page` where id=1
11:33:11 sql: select `id`,`type` from `section` where page_id=1
11:33:11 sql: select * from `section` where id=1
11:33:11 sql: select * from `section` where id=2
11:33:12 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
11:35:16 sql: select * from `config` where id=1
11:35:16 sql: select * from `user` where `username`='admin'
11:35:16 sql: select `id`,`title` from `page` where `parent`=NULL
11:35:16 sql: select * from `page` where id=1
11:35:16 sql: select `id`,`type` from `section` where page_id=1
11:35:16 sql: select * from `section` where id=1
11:35:16 sql: select * from `section` where id=2
11:35:53 sql: select * from `config` where id=1
11:35:53 sql: select * from `user` where `username`='admin'
11:35:53 sql: select `id`,`title` from `page` where `parent`=NULL
11:35:53 sql: select * from `page` where id=1
11:35:53 sql: select `id`,`type` from `section` where page_id=1
11:35:53 sql: select * from `section` where id=1
11:36:09 sql: select * from `section` where id=2
11:41:47 sql: select * from `config` where id=1
11:41:47 sql: select * from `user` where `username`='admin'
11:41:47 sql: select `id`,`title` from `page` where `parent`=NULL
11:41:47 sql: select * from `page` where id=1
11:41:47 sql: select `id`,`type` from `section` where page_id=1
11:41:47 sql: select * from `section` where id=1
11:41:47 sql: select * from `section` where id=2
11:42:04 sql: select * from `config` where id=1
11:42:05 sql: select * from `user` where `username`='admin'
11:42:05 sql: select `id`,`title` from `page` where `parent`=NULL
11:42:05 sql: select * from `page` where id=1
11:42:05 sql: select `id`,`type` from `section` where page_id=1
11:42:05 sql: select * from `section` where id=1
11:42:11 sql: select * from `section` where id=2
12:09:50 sql: select * from `config` where id=1
12:09:50 sql: select * from `user` where `username`='admin'
12:09:50 sql: select `id`,`title` from `page` where `parent`=NULL
12:09:50 sql: select * from `page` where id=1
12:09:50 sql: select `id`,`type` from `section` where page_id=1
12:09:50 sql: select * from `section` where id=1
12:09:50 sql: select * from `section` where id=2
12:09:51 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:10:44 sql: select * from `config` where id=1
12:10:44 sql: select * from `user` where `username`='admin'
12:10:44 sql: select `id`,`title` from `page` where `parent`=NULL
12:10:44 sql: select * from `page` where id=1
12:10:44 sql: select `id`,`type` from `section` where page_id=1
12:10:44 sql: select * from `section` where id=1
12:10:48 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:10:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:11:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:11:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:11:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:11:08 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:11:08 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:11:17 sql: insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (NULL,'picture',NULL,2,'{"url":"uploads%2F1%2F2020-12-25%2016-56-05.jpeg","title":"Skellett","shadow":1}')
12:11:26 PHP: Undantagsfel i databasen för  [insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (NULL,'picture',NULL,2,'{"url":"uploads%2F1%2F2020-12-25%2016-56-05.jpeg","title":"Skellett","shadow":1}')] Column 'page_id' cannot be null
12:11:29 function load_picture(section_id) {

    verify_object(section_id, 'number');

    sql_select('section', ['*'], `id=${section_id}`).then(
        (recs) => {
            verify_object(recs, 'object');
            if (recs.length === 0) {
                logg(`Sökt bild i sektion med id=${section_id} kunde inte hittas`);
            }
            else {
                let rec = decode_section(recs[0]);
                let content = decode_picture_content(rec.content);

                var div = document.createElement('section');
                set_section_info(div, rec.type, rec.page_id, rec.id);

                div.style.height = `${rec.height}vh`;
                div.style.textAlign = content.align;
                
                var img = document.createElement('img');
                img.addEventListener('load', () => {
                    draw_image(div, img, content.shadow, content.title, content.align);
                    on_picture_resize(div);
                    let figcap = verify_object(div.querySelector('figcaption'), 'object');
                    figcap.style.textAlign = content.align;
                    });
                img.src = content.url;


                div.addEventListener('dblclick', () => {
                    show_fullsize(content.url);
                });

                div.addEventListener('mousedown', (e) => {
                    select_picture(div);
                });

                document.querySelector('main').appendChild(div);

            }
        });
}: NULL object
12:11:30 function load_picture(section_id) {

    verify_object(section_id, 'number');

    sql_select('section', ['*'], `id=${section_id}`).then(
        (recs) => {
            verify_object(recs, 'object');
            if (recs.length === 0) {
                logg(`Sökt bild i sektion med id=${section_id} kunde inte hittas`);
            }
            else {
                let rec = decode_section(recs[0]);
                let content = decode_picture_content(rec.content);

                var div = document.createElement('section');
                set_section_info(div, rec.type, rec.page_id, rec.id);

                div.style.height = `${rec.height}vh`;
                div.style.textAlign = content.align;
                
                var img = document.createElement('img');
                img.addEventListener('load', () => {
                    draw_image(div, img, content.shadow, content.title, content.align);
                    on_picture_resize(div);
                    let figcap = verify_object(div.querySelector('figcaption'), 'object');
                    figcap.style.textAlign = content.align;
                    });
                img.src = content.url;


                div.addEventListener('dblclick', () => {
                    show_fullsize(content.url);
                });

                div.addEventListener('mousedown', (e) => {
                    select_picture(div);
                });

                document.querySelector('main').appendChild(div);

            }
        });
}: Excepted a number object but got a object
12:11:30 sql: select * from `section` where id=null
12:11:30 Sökt bild i sektion med id=null kunde inte hittas
12:15:45 sql: select * from `config` where id=1
12:15:45 sql: select * from `user` where `username`='admin'
12:15:46 sql: select `id`,`title` from `page` where `parent`=NULL
12:15:46 sql: select * from `page` where id=1
12:15:46 sql: select `id`,`type` from `section` where page_id=1
12:15:46 sql: select * from `section` where id=1
12:15:50 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:15:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:16:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:16:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:16:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:16:07 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:16:07 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:18:37 sql: select * from `config` where id=1
12:18:38 sql: select * from `user` where `username`='admin'
12:18:38 sql: select `id`,`title` from `page` where `parent`=NULL
12:18:38 sql: select * from `page` where id=1
12:18:38 sql: select `id`,`type` from `section` where page_id=1
12:18:38 sql: select * from `section` where id=1
12:18:40 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:18:44 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:18:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:18:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:18:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:18:55 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:18:55 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:19:40 sql: select * from `config` where id=1
12:19:40 sql: select * from `user` where `username`='admin'
12:19:40 sql: select `id`,`title` from `page` where `parent`=NULL
12:19:40 sql: select * from `page` where id=1
12:19:40 sql: select `id`,`type` from `section` where page_id=1
12:19:40 sql: select * from `section` where id=1
12:19:41 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:19:43 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:19:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:19:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:19:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:19:56 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:19:56 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:20:51 sql: select * from `config` where id=1
12:20:51 sql: select * from `user` where `username`='admin'
12:20:51 sql: select `id`,`title` from `page` where `parent`=NULL
12:20:51 sql: select * from `page` where id=1
12:20:51 sql: select `id`,`type` from `section` where page_id=1
12:20:51 sql: select * from `section` where id=1
12:20:52 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:20:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:20:57 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:20:57 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:20:57 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:21:03 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:21:04 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:22:51 sql: select * from `config` where id=1
12:22:51 sql: select * from `user` where `username`='admin'
12:22:51 sql: select `id`,`title` from `page` where `parent`=NULL
12:22:51 sql: select * from `page` where id=1
12:22:51 sql: select `id`,`type` from `section` where page_id=1
12:22:51 sql: select * from `section` where id=1
12:22:53 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:22:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:23:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:23:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:23:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:23:07 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:23:07 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:23:13 sql: insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (1,'picture',20,1,'{"url":"uploads%2F1%2F2020-12-22%2022-24-30.jpeg","title":"test","shadow":"1"}')
12:23:13 sql: select * from `section` where id=4
12:23:16 null: NULL object
12:23:22 sql: select * from `config` where id=1
12:23:22 sql: select * from `user` where `username`='admin'
12:23:22 sql: select `id`,`title` from `page` where `parent`=NULL
12:23:22 sql: select * from `page` where id=1
12:23:22 sql: select `id`,`type` from `section` where page_id=1
12:23:22 sql: select * from `section` where id=1
12:23:22 sql: select * from `section` where id=4
12:23:23 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:23:53 sql: delete from `section` where id=4
12:25:44 sql: select * from `config` where id=1
12:25:45 sql: select * from `user` where `username`='admin'
12:25:45 sql: select `id`,`title` from `page` where `parent`=NULL
12:25:45 sql: select * from `page` where id=1
12:25:45 sql: select `id`,`type` from `section` where page_id=1
12:25:45 sql: select * from `section` where id=1
12:25:45 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:25:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:25:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:25:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:25:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:26:00 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:26:00 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:26:06 sql: insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (1,'picture',20,1,'{"url":"uploads%2F1%2F2020-12-22%2022-24-30.jpeg","title":"test","shadow":"1","align":"center"}')
12:26:06 sql: select * from `section` where id=5
12:26:07 null: NULL object
12:36:17 sql: select * from `config` where id=1
12:36:18 sql: select * from `user` where `username`='admin'
12:36:18 sql: select `id`,`title` from `page` where `parent`=NULL
12:36:18 sql: select * from `page` where id=1
12:36:18 sql: select `id`,`type` from `section` where page_id=1
12:36:18 sql: select * from `section` where id=1
12:36:18 sql: select * from `section` where id=5
12:36:19 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:36:38 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:36:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:36:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:36:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:36:50 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:36:50 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:36:58 sql: insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (1,'picture',20,2,'{"url":"uploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":"1","align":"center"}')
12:36:58 sql: select * from `section` where id=6
12:37:00 sql: update `section` set `height`=20,`order`=1,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2020-12-22%252022-24-30.jpeg","title":"test","shadow":"1","align":"center"}' where id=5
12:37:01 sql: update `section` set `height`=20,`order`=2,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":"1","align":"center"}' where id=6
12:37:02 sql: update `section` set `height`=20,`order`=1,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2020-12-22%252022-24-30.jpeg","title":"test","shadow":"1","align":"center"}' where id=5
12:37:06 sql: update `section` set `height`=20,`order`=2,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":"1","align":"center"}' where id=6
12:37:11 sql: update `section` set `height`=20,`order`=1,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2Froland-bw-512.jpg","title":"Roland","shadow":"1","align":"center"}' where id=6
12:37:11 sql: update `section` set `height`=20,`order`=1,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%2F1%2Froland-bw-512.jpg%22%20style%3D%22width%3A%20132px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%20style%3D%22text-align%3A%20center%3B%22%3ERoland%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=6
12:37:13 sql: update `section` set `height`=20,`order`=0,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
12:37:14 null: NULL object
12:37:16 sql: update `section` set `height`=20,`order`=2,`content`='{"url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2020-12-22%252022-24-30.jpeg","title":"test","shadow":"1","align":"center"}' where id=5
12:37:17 sql: update `section` set `height`=20,`order`=2,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%2F1%2F2020-12-22%2022-24-30.jpeg%22%20style%3D%22width%3A%20193px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%20style%3D%22text-align%3A%20center%3B%22%3Etest%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=5
12:37:20 sql: select * from `config` where id=1
12:37:20 sql: select * from `user` where `username`='admin'
12:37:20 sql: select `id`,`title` from `page` where `parent`=NULL
12:37:20 sql: select * from `page` where id=1
12:37:20 sql: select `id`,`type` from `section` where page_id=1
12:37:20 sql: select * from `section` where id=1
12:37:20 sql: select * from `section` where id=5
12:37:20 sql: select * from `section` where id=6
12:37:23 sql: select * from `config` where id=1
12:37:24 sql: select * from `user` where `username`='admin'
12:37:24 sql: select `id`,`title` from `page` where `parent`=NULL
12:37:24 sql: select * from `page` where id=1
12:37:24 sql: select `id`,`type` from `section` where page_id=1
12:37:24 sql: select * from `section` where id=1
12:37:24 sql: select * from `section` where id=6
12:37:24 sql: select * from `section` where id=5
12:43:26 sql: select * from `config` where id=1
12:43:27 sql: select * from `user` where `username`='admin'
12:43:27 sql: select `id`,`title` from `page` where `parent`=NULL
12:43:27 sql: select * from `page` where id=1
12:43:27 sql: select `id`,`type` from `section` where page_id=1
12:43:27 sql: select * from `section` where id=1
12:43:27 sql: select * from `section` where id=5
12:43:27 sql: select * from `section` where id=6
12:43:28 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:43:41 sql: update `section` set `order`=0 where id=NaN
12:47:54 sql: select * from `config` where id=1
12:47:54 sql: select * from `user` where `username`='admin'
12:47:54 sql: select `id`,`title` from `page` where `parent`=NULL
12:47:54 sql: select * from `page` where id=1
12:47:54 sql: select `id`,`type` from `section` where page_id=1
12:47:54 sql: select * from `section` where id=1
12:47:54 sql: select * from `section` where id=5
12:47:54 sql: select * from `section` where id=6
12:48:20 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:49:00 sql: update `section` set `order`=0 where id=5
12:49:12 sql: update `section` set `order`=1 where id=1
12:49:15 sql: update `section` set `order`=2 where id=6
12:50:38 sql: update `section` set `order`=0 where id=5
12:50:38 sql: update `section` set `order`=1 where id=6
12:50:38 sql: update `section` set `order`=2 where id=1
12:50:55 sql: update `section` set `order`=0 where id=5
12:50:55 sql: update `section` set `order`=1 where id=1
12:50:55 sql: update `section` set `order`=2 where id=6
12:50:55 sql: update `section` set `order`=0 where id=1
12:50:55 sql: update `section` set `order`=1 where id=5
12:50:55 sql: update `section` set `order`=2 where id=6
12:51:03 null: NULL object
12:51:04 null: NULL object
12:51:39 sql: select * from `config` where id=1
12:51:40 sql: select * from `user` where `username`='admin'
12:51:40 sql: select `id`,`title` from `page` where `parent`=NULL
12:51:40 sql: select * from `page` where id=1
12:51:40 sql: select `id`,`type` from `section` where page_id=1
12:51:40 sql: select * from `section` where id=1
12:51:41 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:52:30 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:52:33 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:52:33 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:52:33 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:52:45 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:52:45 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
12:53:41 sql: insert into `section` (`page_id`,`type`,`height`,`order`,`content`) values (1,'picture',20,1,'{"url":"uploads%2F1%2F_20200729_222931.jpg","title":"Långt hår","shadow":"1","align":"center"}')
12:53:53 sql: select * from `section` where id=7
12:54:24 sql: select * from `config` where id=1
12:54:24 sql: select * from `user` where `username`='admin'
12:54:24 sql: select `id`,`title` from `page` where `parent`=NULL
12:54:24 sql: select * from `page` where id=1
12:54:24 sql: select `id`,`type` from `section` where page_id=1
12:54:24 sql: select * from `section` where id=1
12:54:24 sql: select * from `section` where id=7
12:54:45 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:56:04 sql: update `section` set `order`=0 where id=7
12:56:04 sql: update `section` set `order`=1 where id=1
12:56:08 sql: select * from `config` where id=1
12:56:09 sql: select * from `user` where `username`='admin'
12:56:09 sql: select `id`,`title` from `page` where `parent`=NULL
12:56:09 sql: select * from `page` where id=1
12:56:09 sql: select `id`,`type` from `section` where page_id=1
12:56:09 sql: select * from `section` where id=1
12:56:09 sql: select * from `section` where id=7
12:56:12 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:58:18 sql: select * from `config` where id=1
12:58:18 sql: select * from `user` where `username`='admin'
12:58:18 sql: select `id`,`title` from `page` where `parent`=NULL
12:58:18 sql: select * from `page` where id=1
12:58:18 sql: select `id`,`type` from `section` where page_id=1 order by order asc
12:58:32 PHP: Undantagsfel i databasen för  [select `id`,`type` from `section` where page_id=1 order by order asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'order asc' at line 1
12:58:58 sql: select * from `config` where id=1
12:58:59 sql: select * from `user` where `username`='admin'
12:58:59 sql: select `id`,`title` from `page` where `parent`=NULL
12:58:59 sql: select * from `page` where id=1
12:58:59 sql: select `id`,`type` from `section` where page_id=1 order by `order` asc
12:58:59 sql: select * from `section` where id=7
12:58:59 sql: select * from `section` where id=1
12:59:02 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
12:59:09 sql: update `section` set `order`=0 where id=7
12:59:09 sql: update `section` set `order`=1 where id=1
12:59:12 sql: select * from `config` where id=1
12:59:13 sql: select * from `user` where `username`='admin'
12:59:13 sql: select `id`,`title` from `page` where `parent`=NULL
12:59:13 sql: select * from `page` where id=1
12:59:13 sql: select `id`,`type` from `section` where page_id=1 order by `order` asc
12:59:13 sql: select * from `section` where id=7
12:59:13 sql: select * from `section` where id=1
12:59:17 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:01:56 sql: select * from `config` where id=1
13:01:56 sql: select * from `user` where `username`='admin'
13:01:56 sql: select `id`,`title` from `page` where `parent`=NULL
13:01:56 sql: select * from `page` where id=1
13:01:56 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:01:56 sql: select * from `section` where id=1
13:01:57 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:02:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:02:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:02:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:02:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:02:07 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
13:02:07 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
13:02:18 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'picture',20,1,'{"url":"uploads%2F1%2F_20200729_222931.jpg","title":"Test","shadow":"1","align":"center"}')
13:02:18 sql: select * from `section` where id=2
13:02:20 null: NULL object
13:02:40 sql: select * from `config` where id=1
13:02:40 sql: select * from `user` where `username`='admin'
13:02:40 sql: select `id`,`title` from `page` where `parent`=NULL
13:02:40 sql: select * from `page` where id=1
13:02:40 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:02:40 sql: select * from `section` where id=1
13:02:40 sql: select * from `section` where id=2
13:02:41 function on_section_selected(section, onsave) {
    
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:02:42 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%2F1%2F_20200729_222931.jpg%22%20style%3D%22width%3A%20126px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%20style%3D%22text-align%3A%20center%3B%22%3ETest%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=2
13:02:42 null: NULL object
13:09:23 sql: select * from `config` where id=1
13:09:24 sql: select * from `user` where `username`='admin'
13:09:24 sql: select `id`,`title` from `page` where `parent`=NULL
13:09:24 sql: select * from `page` where id=1
13:09:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:09:24 sql: select * from `section` where id=1
13:09:24 sql: select * from `section` where id=2
13:10:47 sql: select * from `config` where id=1
13:10:48 sql: select * from `user` where `username`='admin'
13:10:48 sql: select `id`,`title` from `page` where `parent`=NULL
13:10:48 sql: select * from `page` where id=1
13:10:48 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:10:48 sql: select * from `section` where id=1
13:10:48 sql: select * from `section` where id=2
13:10:56 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:10:56 on_section_selected Global:Invalid, New selection:s-2
13:10:56 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:10:59 on_section_selected Global:s-2, New selection:s-1
13:10:59 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:11:02 on_section_selected Global:s-1, New selection:s-2
13:11:02 null: NULL object
13:11:09 sql: select * from `config` where id=1
13:11:10 sql: select * from `user` where `username`='admin'
13:11:10 sql: select `id`,`title` from `page` where `parent`=NULL
13:11:10 sql: select * from `page` where id=1
13:11:10 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:11:10 sql: select * from `section` where id=1
13:11:10 sql: select * from `section` where id=2
13:11:11 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:11:11 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:11:11 on_section_selected Global:Invalid, New selection:s-2
13:12:09 sql: select * from `config` where id=1
13:12:09 sql: select * from `user` where `username`='admin'
13:12:09 sql: select `id`,`title` from `page` where `parent`=NULL
13:12:09 sql: select * from `page` where id=1
13:12:10 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:12:10 sql: select * from `section` where id=1
13:12:10 sql: select * from `section` where id=2
13:12:19 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:12:19 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:12:19 on_section_selected Global:Invalid, New selection:s-1
13:12:24 on_section_selected Global:s-1, New selection:s-2
13:12:24 null: NULL object
13:14:14 sql: select * from `config` where id=1
13:14:15 sql: select * from `user` where `username`='admin'
13:14:15 sql: select `id`,`title` from `page` where `parent`=NULL
13:14:15 sql: select * from `page` where id=1
13:14:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:14:15 sql: select * from `section` where id=1
13:14:15 sql: select * from `section` where id=2
13:14:18 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:14:18 on_section_selected Global:Invalid, New selection:s-1
13:14:18 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:14:20 on_section_selected Global:s-1, New selection:s-2
13:14:20 null: NULL object
13:14:33 on_section_selected Global:s-2, New selection:s-1
13:14:33 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:14:35 on_section_selected Global:s-1, New selection:s-2
13:14:35 null: NULL object
13:14:36 on_section_selected Global:s-2, New selection:s-1
13:14:36 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:15:20 sql: select * from `config` where id=1
13:15:20 sql: select * from `user` where `username`='admin'
13:15:20 sql: select `id`,`title` from `page` where `parent`=NULL
13:15:20 sql: select * from `page` where id=1
13:15:20 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:15:20 sql: select * from `section` where id=1
13:15:20 sql: select * from `section` where id=2
13:15:22 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:15:22 on_section_selected Global:Invalid, New selection:s-2
13:15:22 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:15:30 on_section_selected Global:s-2, New selection:s-1
13:15:30 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:15:33 on_section_selected Global:s-1, New selection:s-2
13:15:33 null: NULL object
13:55:15 sql: select * from `config` where id=1
13:55:16 sql: select * from `user` where `username`='admin'
13:55:16 sql: select `id`,`title` from `page` where `parent`=NULL
13:55:16 sql: select * from `page` where id=1
13:55:16 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:55:16 sql: select * from `section` where id=1
13:55:16 sql: select * from `section` where id=2
13:55:16 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Undefined object
13:55:16 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Undefined object
13:55:16 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Excepted a object object but got a undefined
13:55:16 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Excepted a object object but got a undefined
13:55:17 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:55:17 on_section_selected Global:Invalid, New selection:s-2
13:55:17 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:55:22 on_section_selected Global:s-2, New selection:s-1
13:55:22 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:55:26 on_section_selected Global:s-1, New selection:s-2
13:55:26 null: NULL object
13:55:27 on_section_selected Global:s-2, New selection:s-1
13:55:27 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:55:27 on_section_selected Global:s-1, New selection:s-2
13:55:27 null: NULL object
13:55:32 on_section_selected Global:s-2, New selection:s-1
13:55:32 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:55:54 sql: select * from `config` where id=1
13:55:54 sql: select * from `user` where `username`='admin'
13:55:54 sql: select `id`,`title` from `page` where `parent`=NULL
13:55:54 sql: select * from `page` where id=1
13:55:54 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:55:54 sql: select * from `section` where id=1
13:55:54 sql: select * from `section` where id=2
13:55:54 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Undefined object
13:55:54 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Undefined object
13:55:54 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Excepted a object object but got a undefined
13:55:54 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Excepted a object object but got a undefined
13:56:11 sql: select * from `config` where id=1
13:56:11 sql: select * from `user` where `username`='admin'
13:56:11 sql: select `id`,`title` from `page` where `parent`=NULL
13:56:11 sql: select * from `page` where id=1
13:56:11 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:56:11 sql: select * from `section` where id=1
13:56:11 sql: select * from `section` where id=2
13:56:11 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Undefined object
13:56:11 function set_section_info(div, type, page_id, section_id, content) {
    verify_object(div,'object');
    verify_object(type,'string');
    verify_object(section_id,'number');
    verify_object(page_id,'number');
    verify_object(content, 'object');
    div.id = `s-${section_id}`;
    div.setAttribute('data-type', type);
    div.setAttribute('data-page-id', page_id);
    div.setAttribute('data-content', typeof content === 'string' ? content : JSON.stringify(content));
}: Excepted a object object but got a undefined
13:57:06 sql: select * from `config` where id=1
13:57:06 sql: select * from `user` where `username`='admin'
13:57:06 sql: select `id`,`title` from `page` where `parent`=NULL
13:57:06 sql: select * from `page` where id=1
13:57:06 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:57:06 sql: select * from `section` where id=1
13:57:06 sql: select * from `section` where id=2
13:57:11 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:57:11 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:57:11 on_section_selected Global:Invalid, New selection:s-2
13:57:13 on_section_selected Global:s-2, New selection:s-1
13:57:13 sql: update `section` set `height`=20,`pos`=1,`content`='{"align":"center","text":""}' where id=2
13:58:57 sql: select * from `config` where id=1
13:58:57 sql: select * from `user` where `username`='admin'
13:58:57 sql: select `id`,`title` from `page` where `parent`=NULL
13:58:57 sql: select * from `page` where id=1
13:58:57 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:58:57 sql: select * from `section` where id=1
13:58:57 sql: select * from `section` where id=2
13:58:58 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:58:58 on_section_selected Global:Invalid, New selection:s-2
13:58:58 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
13:59:00 on_section_selected Global:s-2, New selection:s-1
13:59:00 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:59:02 on_section_selected Global:s-1, New selection:s-2
13:59:02 null: NULL object
13:59:05 on_section_selected Global:s-2, New selection:s-2
13:59:06 on_section_selected Global:s-2, New selection:s-2
13:59:06 on_section_selected Global:s-2, New selection:s-1
13:59:06 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:59:08 on_section_selected Global:s-1, New selection:s-2
13:59:08 null: NULL object
13:59:08 on_section_selected Global:s-2, New selection:s-1
13:59:08 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:59:12 on_section_selected Global:s-1, New selection:s-2
13:59:12 null: NULL object
13:59:14 on_section_selected Global:s-2, New selection:s-1
13:59:14 sql: update `section` set `height`=20,`pos`=0,`content`='{"align":"center","text":""}' where id=2
13:59:16 on_section_selected Global:s-1, New selection:s-2
13:59:16 null: NULL object
14:01:40 sql: select * from `config` where id=1
14:01:40 sql: select * from `user` where `username`='admin'
14:01:40 sql: select `id`,`title` from `page` where `parent`=NULL
14:01:40 sql: select * from `page` where id=1
14:01:40 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
14:01:40 sql: select * from `section` where id=1
14:01:40 sql: select * from `section` where id=2
14:01:41 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
14:01:41 on_section_selected Global:Invalid, New selection:s-1
14:01:41 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
14:01:43 on_section_selected Global:s-1, New selection:s-2
14:01:43 null: NULL object
14:01:54 on_section_selected Global:s-2, New selection:s-1
14:02:39 sql: select * from `config` where id=1
14:02:39 sql: select * from `user` where `username`='admin'
14:02:39 sql: select `id`,`title` from `page` where `parent`=NULL
14:02:39 sql: select * from `page` where id=1
14:02:39 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
14:02:40 sql: select * from `section` where id=1
14:02:40 sql: select * from `section` where id=2
14:02:41 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
14:02:41 on_section_selected Global:Invalid, New selection:s-1
14:02:41 function on_section_selected(section, onsave) {
    
    if( !is_valid(Global.selected_section) ) {
        logg( `on_section_selected Global:Invalid, New selection:${section.id}`, true);
    }
    else {
        logg( `on_section_selected Global:${Global.selected_section.id}, New selection:${section.id}`, true);
    }
    verify_object(section,'object');
    
    if (!is_valid_user(Global.user)) return false;

    if( is_valid(Global.selected_section,false) && section.id !== Global.selected_section.id) {
        onsave();
    }
    Global.selected_section = section;
    
    let sections = document.querySelectorAll('section');
    sections.forEach(s => {
        s.classList.remove('section-edit');
    });
    section.classList.add('section-edit');
    return true;
}: Undefined object
14:02:42 on_section_selected Global:s-1, New selection:s-2
14:02:42 null: NULL object
14:02:44 on_section_selected Global:s-2, New selection:s-1
14:02:45 on_section_selected Global:s-1, New selection:s-2
14:02:45 null: NULL object
14:02:46 on_section_selected Global:s-2, New selection:s-1
14:02:46 on_section_selected Global:s-1, New selection:s-2
14:02:46 null: NULL object
14:02:47 on_section_selected Global:s-2, New selection:s-1
14:02:48 on_section_selected Global:s-1, New selection:s-1
14:02:49 on_section_selected Global:s-1, New selection:s-1
14:02:50 on_section_selected Global:s-1, New selection:s-1
14:02:50 on_section_selected Global:s-1, New selection:s-1
14:02:54 on_section_selected Global:s-1, New selection:s-1
14:02:54 on_section_selected Global:s-1, New selection:s-1
14:02:58 on_section_selected Global:s-1, New selection:s-2
14:02:58 null: NULL object
14:02:59 on_section_selected Global:s-2, New selection:s-1
14:03:00 on_section_selected Global:s-1, New selection:s-2
14:03:00 null: NULL object
14:03:08 on_section_selected Global:s-2, New selection:s-1
14:03:13 on_section_selected Global:s-1, New selection:s-1
14:03:13 on_section_selected Global:s-1, New selection:s-1
14:03:15 on_section_selected Global:s-1, New selection:s-1
14:03:15 on_section_selected Global:s-1, New selection:s-1
14:03:18 on_section_selected Global:s-1, New selection:s-2
14:03:18 null: NULL object
14:03:20 on_section_selected Global:s-2, New selection:s-1
14:03:39 on_section_selected Global:s-1, New selection:s-1
14:04:07 on_section_selected Global:s-1, New selection:s-1
14:04:10 on_section_selected Global:s-1, New selection:s-1
14:04:11 on_section_selected Global:s-1, New selection:s-2
14:04:11 null: NULL object
14:04:14 on_section_selected Global:s-2, New selection:s-1
14:04:17 on_section_selected Global:s-1, New selection:s-2
14:04:17 null: NULL object
14:04:19 on_section_selected Global:s-2, New selection:s-1
14:04:21 on_section_selected Global:s-1, New selection:s-1
14:04:25 on_section_selected Global:s-1, New selection:s-2
14:04:25 null: NULL object
14:04:28 on_section_selected Global:s-2, New selection:s-1
19:29:28 sql: select * from `config` where id=1
19:29:55 sql: select * from `config` where id=1
19:29:55 sql: select `id`,`title` from `page` where `parent`=NULL
19:29:55 sql: select * from `page` where id=1 order by pos asc
19:29:55 function is_valid_user(user) {
    if (!is_valid(user, false)) return false;
    if (!is_valid(user.username, false)) return false;
    if (user.username.length === 0) return false;
    return true;
}: Undefined object
19:29:55 sql: select `id` from `section` where page_id=1 order by `pos` asc
19:31:01 sql: select * from `config` where id=1
19:31:02 sql: select `id`,`title` from `page` where `parent`=NULL
19:31:02 sql: select * from `page` where id=1 order by pos asc
19:31:02 sql: select `id` from `section` where page_id=1 order by `pos` asc
19:31:02 function is_valid_user(user) {
    if (!is_valid(user, false)) return false;
    if (!is_valid(user.username, false)) return false;
    if (user.username.length === 0) return false;
    return true;
}: Undefined object
19:31:02 sql: select * from `section` where id=1
19:31:02 sql: select * from `section` where id=1
20:30:36 sql: select * from `config` where id=1
20:30:36 sql: select * from `config` where id=1
20:30:36 sql: select `id`,`title` from `page` where `parent`=NULL
20:30:36 sql: select * from `page` where id=1 order by pos asc
20:30:36 function is_valid_user(user) {
    if (!is_valid(user, false)) return false;
    if (!is_valid(user.username, false)) return false;
    if (user.username.length === 0) return false;
    return true;
}: Undefined object
20:30:36 sql: select `id` from `section` where page_id=1 order by `pos` asc
20:30:36 sql: select * from `section` where id=1
20:30:36 sql: select * from `section` where id=1
20:30:38 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:30:38 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:30:48 verify_user: [object Object]
20:32:06 sql: select * from `config` where id=1
20:32:06 sql: select * from `user` where username='undefined'
20:32:06 sql: select `id`,`title` from `page` where `parent`=NULL
20:32:06 sql: select * from `page` where id=1 order by pos asc
20:32:06 sql: select `id` from `section` where page_id=1 order by `pos` asc
20:32:06 sql: select * from `section` where id=1
20:32:06 sql: select * from `section` where id=1
21:11:27 sql: select * from `config` where id=1
21:11:27 sql: select * from `user` where username='undefined'
21:11:27 sql: select `id`,`title` from `page` where `parent`=NULL
21:11:27 sql: select * from `page` where id=[object Object] order by pos asc
21:11:27 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object Object] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object] order by pos asc' at line 1
21:17:59 sql: select * from `config` where id=1
21:17:59 sql: select * from `user` where username='undefined'
21:17:59 sql: select `id`,`title` from `page` where `parent`=NULL
21:17:59 sql: select * from `page` where id=[object Object] order by pos asc
21:17:59 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object Object] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object] order by pos asc' at line 1
21:18:29 sql: select * from `config` where id=1
21:18:29 sql: select * from `user` where username='undefined'
21:18:29 sql: select `id`,`title` from `page` where `parent`=NULL
21:18:29 sql: select * from `page` where id=[object Object] order by pos asc
21:18:29 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object Object] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object] order by pos asc' at line 1
21:21:11 sql: select * from `config` where id=1
21:21:11 sql: select * from `user` where username='undefined'
21:21:11 sql: select `id`,`title` from `page` where `parent`=NULL
21:21:11 sql: select * from `page` where id=[object Object] order by pos asc
21:21:11 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object Object] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object] order by pos asc' at line 1
21:23:19 sql: select * from `config` where id=1
21:23:19 sql: select * from `user` where username='undefined'
21:23:19 sql: select `id`,`title` from `page` where `parent`=NULL
21:23:19 sql: select * from `page` where id=[object Object] order by pos asc
21:23:19 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object Object] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object] order by pos asc' at line 1
21:25:31 sql: select * from `config` where id=1
21:25:31 sql: select * from `user` where username='undefined'
21:25:31 sql: select `id`,`title` from `page` where `parent`=NULL
21:25:31 sql: select * from `page` where id=1 order by pos asc
21:25:57 sql: select * from `config` where id=1
21:25:57 sql: select * from `user` where username='undefined'
21:25:57 sql: select `id`,`title` from `page` where `parent`=NULL
21:25:57 sql: select * from `page` where id=1 order by pos asc
08:53:14 sql: select * from `config` where id=1
08:53:37 sql: select * from `config` where id=1
08:53:37 sql: select * from `user` where username='undefined'
08:54:58 sql: select * from `config` where id=1
08:54:58 sql: select * from `user` where username='undefined'
08:55:15 sql: select * from `config` where id=1
08:55:15 sql: select * from `user` where username='undefined'
08:55:32 sql: select * from `config` where id=1
08:55:32 sql: select * from `user` where username='undefined'
08:55:43 sql: select * from `config` where id=1
08:55:43 sql: select * from `user` where username='undefined'
08:55:55 sql: select * from `config` where id=1
08:55:55 sql: select * from `user` where username='undefined'
08:56:16 sql: select * from `config` where id=1
08:57:04 sql: select * from `config` where id=1
08:57:07 sql: select * from `user` where username='undefined'
08:58:47 sql: select * from `config` where id=1
08:58:47 sql: select * from `user` where username='undefined'
08:58:54 sql: select * from `config` where id=1
09:00:22 sql: select * from `config` where id=1
09:00:39 sql: select * from `user` where username='undefined'
09:01:35 sql: select * from `config` where id=1
09:01:37 sql: select * from `user` where username='undefined'
09:02:26 sql: select * from `config` where id=1
09:03:04 sql: select * from `config` where id=1
09:05:24 sql: select * from `config` where id=1
09:05:34 sql: select * from `user` where username='undefined'
09:06:08 sql: select * from `config` where id=1
09:06:55 sql: select * from `config` where id=1
09:07:01 null: Undefined object
09:07:10 sql: select * from `user` where username='undefined'
09:07:15 Fel vid laddning ar användare Ingen avnändare angavs
09:07:58 sql: select * from `config` where id=1
09:08:03 null: Undefined object
09:08:03 sql: select * from `user` where username='undefined'
09:08:03 Fel vid laddning ar användare: Ingen avnändare angavs
09:08:39 sql: select * from `config` where id=1
09:08:39 null: Undefined object
09:08:39 Fel vid laddning ar användare: Ingen avnändare angavs
09:08:39 sql: select * from `user` where username='undefined'
09:12:23 sql: select * from `config` where id=1
09:12:23 null: Undefined object
09:12:23 sql: select * from `user` where username='undefined'
09:12:23 Fel vid laddning ar användare: Ingen avnändare angavs
09:18:31 sql: select * from `config` where id=1
09:18:32 null: Undefined object
09:18:32 Fel vid laddning ar användare: Ingen avnändare angavs
09:18:32 sql: select * from `user` where username='undefined'
09:18:55 sql: select * from `config` where id=1
09:18:55 null: Undefined object
09:18:55 sql: select * from `user` where username='undefined'
09:18:55 Fel vid laddning ar användare: Ingen avnändare angavs
09:19:56 sql: select * from `config` where id=1
09:19:56 null: Undefined object
09:19:56 sql: select * from `user` where username='undefined'
09:19:56 Fel vid laddning ar användare: Ingen avnändare angavs
09:20:46 sql: select * from `config` where id=1
09:20:46 null: Undefined object
09:20:46 sql: select * from `user` where username='undefined'
09:20:46 Fel vid laddning ar användare: Ingen avnändare angavs
09:21:14 sql: select * from `config` where id=1
09:21:14 null: Undefined object
09:21:14 sql: select * from `user` where username='undefined'
09:21:14 Fel vid laddning ar användare: Ingen avnändare angavs
09:21:28 sql: select * from `config` where id=1
09:21:28 null: Undefined object
09:21:28 sql: select * from `user` where username='undefined'
09:21:28 Fel vid laddning ar användare: Ingen avnändare angavs
09:21:28 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:21:28 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:22:01 sql: select * from `config` where id=1
09:22:01 null: Undefined object
09:22:01 sql: select * from `user` where username='undefined'
09:22:01 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:22:01 Fel vid laddning ar användare: Ingen avnändare angavs
09:22:01 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:23:43 sql: select * from `config` where id=1
09:23:43 null: Undefined object
09:23:43 sql: select * from `user` where username='undefined'
09:23:43 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:23:43 Fel vid laddning ar användare: Ingen avnändare angavs
09:23:43 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:24:01 sql: select * from `config` where id=1
09:24:01 null: Undefined object
09:24:01 sql: select * from `user` where username='undefined'
09:24:01 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:24:01 Fel vid laddning ar användare: Ingen avnändare angavs
09:24:01 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:24:01 sql: select `id`,`title` from `page` where `parent`=NULL
09:24:01 null: Undefined object
09:24:43 sql: select * from `config` where id=1
09:24:43 null: Undefined object
09:24:43 sql: select * from `user` where username='undefined'
09:24:43 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:24:43 Fel vid laddning ar användare: Ingen avnändare angavs
09:24:43 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:24:43 sql: select `id`,`title` from `page` where `parent`=NULL
09:24:43 null: Undefined object
09:25:18 sql: select * from `config` where id=1
09:25:18 null: Undefined object
09:25:18 sql: select * from `user` where username='undefined'
09:25:18 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:25:18 Fel vid laddning ar användare: Ingen avnändare angavs
09:25:18 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:25:18 sql: select `id`,`title` from `page` where parent=0
09:25:18 null: Undefined object
09:25:41 sql: select * from `config` where id=1
09:25:41 null: Undefined object
09:25:41 sql: select * from `user` where username='undefined'
09:25:41 Fel vid laddning ar användare: Ingen avnändare angavs
09:25:41 sql: select `id`,`title` from `page` where parent=0
09:25:41 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:25:41 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:25:41 null: Undefined object
09:27:23 sql: select * from `config` where id=1
09:27:23 null: Undefined object
09:27:23 sql: select * from `user` where username='undefined'
09:27:23 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:27:23 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:27:23 Fel vid laddning ar användare: Ingen avnändare angavs
09:27:23 sql: select `id`,`title` from `page` where parent=0
09:27:23 null: Undefined object
09:27:48 sql: select * from `config` where id=1
09:27:48 null: Undefined object
09:27:48 sql: select * from `user` where username='undefined'
09:27:48 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:27:48 Fel vid laddning ar användare: Ingen avnändare angavs
09:27:48 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:29:18 sql: select * from `config` where id=1
09:29:18 null: Undefined object
09:29:18 sql: select * from `user` where username='undefined'
09:29:18 Fel vid laddning ar användare: Ingen avnändare angavs
09:29:18 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:29:18 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:29:21 sql: select `id`,`title` from `page` where `parent`=0
09:29:21 null: Undefined object
09:30:22 sql: select * from `config` where id=1
09:30:22 null: Undefined object
09:30:22 sql: select * from `user` where username='undefined'
09:30:22 Fel vid laddning ar användare: Ingen avnändare angavs
09:30:22 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:30:22 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:30:38 sql: select `id`,`title` from `page` where `parent`=0
09:30:38 null: Undefined object
09:32:19 null: NULL object
09:32:19 sql: select * from `config` where id=1
09:32:19 null: Undefined object
09:32:19 null: NULL object
09:32:19 sql: select * from `user` where username='undefined'
09:32:19 Fel vid laddning ar användare: Ingen avnändare angavs
09:32:19 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:32:19 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
09:32:21 null: NULL object
09:32:21 sql: select `id`,`title` from `page` where `parent`=0
09:32:21 null: Undefined object
09:34:45 null: NULL object
09:34:45 sql: select * from `config` where id=1
09:34:45 null: Undefined object
09:34:45 null: NULL object
09:34:45 sql: select * from `user` where username='undefined'
09:34:45 Fel vid laddning ar användare: Ingen avnändare angavs
09:34:45 sql: select * from `page` where id=[object HTMLElement] order by pos asc
09:34:45 PHP: Undantagsfel i databasen för  [select * from `page` where id=[object HTMLElement] order by pos asc] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object HTMLElement] order by pos asc' at line 1
10:08:02 null: NULL object
10:08:02 sql: select * from `config` where id=1
10:08:02 null: Undefined object
10:09:36 null: NULL object
10:09:36 sql: select * from `config` where id=1
10:09:36 null: Undefined object
10:09:36 Fel vid laddning ar användare: Ingen avnändare angavs
10:11:19 null: NULL object
10:11:19 sql: select * from `config` where id=1
10:11:19 null: Undefined object
10:11:19 Fel vid laddning ar användare: Ingen avnändare angavs
10:11:25 sql: select * from `page` where id=1 order by pos asc
10:11:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:11:34 null: Undefined object
10:11:35 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:11:36 null: NULL object
10:11:36 PHP: Undantagsfel i databasen för  [select * from `section` where id=[object Object]] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object]' at line 1
10:11:36 sql: select * from `section` where id=[object Object]
10:11:37 null: NULL object
10:11:37 PHP: Undantagsfel i databasen för  [select * from `section` where id=[object Object]] You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[object Object]' at line 1
10:11:37 sql: select * from `section` where id=[object Object]
10:12:52 null: NULL object
10:12:52 sql: select * from `config` where id=1
10:12:52 null: Undefined object
10:12:52 Fel vid laddning ar användare: Ingen avnändare angavs
10:13:08 sql: select * from `page` where id=1 order by pos asc
10:13:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:13:17 null: Undefined object
10:13:19 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:14:02 null: NULL object
10:14:02 sql: select * from `config` where id=1
10:14:02 null: Undefined object
10:14:02 Fel vid laddning ar användare: Ingen avnändare angavs
10:14:05 sql: select * from `page` where id=1 order by pos asc
10:14:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:14:07 null: Undefined object
10:14:08 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:14:49 null: NULL object
10:14:49 sql: select * from `config` where id=1
10:14:49 null: Undefined object
10:14:49 Fel vid laddning ar användare: Ingen avnändare angavs
10:14:50 sql: select * from `page` where id=1 order by pos asc
10:14:52 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:14:52 null: Undefined object
10:14:53 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:15:10 null: NULL object
10:15:10 sql: select * from `config` where id=1
10:15:10 null: Undefined object
10:15:10 Fel vid laddning ar användare: Ingen avnändare angavs
10:15:10 sql: select * from `page` where id=1 order by pos asc
10:15:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:15:12 null: Undefined object
10:15:13 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:16:17 null: NULL object
10:16:17 sql: select * from `config` where id=1
10:16:17 null: Undefined object
10:16:17 Fel vid laddning ar användare: Ingen avnändare angavs
10:16:18 sql: select * from `page` where id=1 order by pos asc
10:16:21 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:16:21 null: Undefined object
10:16:22 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:17:27 null: NULL object
10:17:27 sql: select * from `config` where id=1
10:17:27 null: Undefined object
10:17:27 Fel vid laddning ar användare: Ingen avnändare angavs
10:17:28 sql: select * from `page` where id=1 order by pos asc
10:17:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:17:30 null: Undefined object
10:17:30 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:17:31 null: NULL object
10:17:31 sql: select * from `section` where id=1
10:17:32 null: NULL object
10:17:32 sql: select * from `section` where id=2
10:17:38 null: NULL object
10:17:38 sql: select * from `config` where id=1
10:17:38 null: Undefined object
10:17:38 Fel vid laddning ar användare: Ingen avnändare angavs
10:17:38 sql: select * from `page` where id=1 order by pos asc
10:17:40 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:17:40 null: Undefined object
10:17:40 sql: select `id` from `section` where page_id=1 order by `pos` asc
10:17:41 null: NULL object
10:17:41 sql: select * from `section` where id=1
10:17:41 null: NULL object
10:17:41 sql: select * from `section` where id=2
11:36:14 null: NULL object
11:36:14 sql: select * from `config` where id=1
11:36:14 null: Undefined object
11:36:14 Fel vid laddning ar användare: Ingen avnändare angavs
11:36:14 sql: select * from `page` where id=1 order by pos asc
11:36:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:36:14 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:36:14 null: Undefined object
11:36:55 null: NULL object
11:36:55 sql: select * from `config` where id=1
11:36:55 null: Undefined object
11:36:55 sql: select * from `page` where id=1 order by pos asc
11:36:55 Fel vid laddning ar användare: Ingen avnändare angavs
11:36:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:36:55 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:36:55 null: Undefined object
11:36:56 null: NULL object
11:36:56 sql: select * from `section` where id=1
11:36:57 null: NULL object
11:36:57 sql: select * from `section` where id=2
11:37:03 null: NULL object
11:37:03 sql: select * from `config` where id=1
11:37:03 null: Undefined object
11:37:03 Fel vid laddning ar användare: Ingen avnändare angavs
11:37:03 sql: select * from `page` where id=1 order by pos asc
11:37:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:37:03 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:37:03 null: Undefined object
11:37:47 null: NULL object
11:37:47 sql: select * from `config` where id=1
11:37:48 null: Undefined object
11:37:48 sql: select * from `page` where id=1 order by pos asc
11:37:48 Fel vid laddning ar användare: Ingen avnändare angavs
11:37:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:37:48 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:37:48 null: Undefined object
11:38:01 null: NULL object
11:38:01 sql: select * from `config` where id=1
11:38:01 null: Undefined object
11:38:01 Fel vid laddning ar användare: Ingen avnändare angavs
11:38:01 sql: select * from `page` where id=1 order by pos asc
11:38:01 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:38:02 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:38:02 null: Undefined object
11:38:45 null: NULL object
11:38:45 sql: select * from `config` where id=1
11:38:45 null: Undefined object
11:38:45 sql: select * from `page` where id=1 order by pos asc
11:38:45 Fel vid laddning ar användare: Ingen avnändare angavs
11:38:45 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:38:45 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:38:45 null: Undefined object
11:39:15 null: NULL object
11:39:15 sql: select * from `section` where id=1
11:40:28 null: NULL object
11:40:28 sql: select * from `config` where id=1
11:40:29 null: Undefined object
11:40:29 Fel vid laddning ar användare: Ingen avnändare angavs
11:40:29 sql: select * from `page` where id=1 order by pos asc
11:40:29 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:40:29 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:40:29 null: Undefined object
11:40:33 null: NULL object
11:40:33 sql: select * from `section` where id=1
11:40:34 null: NULL object
11:40:34 sql: select * from `section` where id=2
11:41:20 null: NULL object
11:41:20 sql: select * from `config` where id=1
11:41:20 null: Undefined object
11:41:20 sql: select * from `page` where id=1 order by pos asc
11:41:20 Fel vid laddning ar användare: Ingen avnändare angavs
11:41:20 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:41:20 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:41:20 null: Undefined object
11:41:24 null: NULL object
11:41:24 sql: select * from `section` where id=1
11:41:24 sql: select * from `section` where id=2
11:41:24 null: NULL object
11:42:08 null: NULL object
11:42:08 sql: select * from `config` where id=1
11:42:08 null: Undefined object
11:42:08 sql: select * from `page` where id=1 order by pos asc
11:42:08 Fel vid laddning ar användare: Ingen avnändare angavs
11:42:08 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:42:08 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:42:08 null: Undefined object
11:42:08 null: NULL object
11:42:08 sql: select * from `section` where id=1
11:42:08 sql: select * from `section` where id=2
11:42:08 null: NULL object
11:43:41 null: NULL object
11:43:41 sql: select * from `config` where id=1
11:43:42 null: Undefined object
11:43:42 sql: select * from `page` where id=1 order by pos asc
11:43:42 Fel vid laddning ar användare: Ingen avnändare angavs
11:43:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:43:42 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:43:42 null: Undefined object
11:43:42 null: NULL object
11:43:42 sql: select * from `section` where id=1
11:43:42 sql: select * from `section` where id=2
11:43:42 null: NULL object
11:46:04 null: NULL object
11:46:04 sql: select * from `config` where id=1
11:46:04 null: Undefined object
11:46:04 Fel vid laddning ar användare: Ingen avnändare angavs
11:46:04 sql: select * from `page` where id=1 order by pos asc
11:46:04 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:46:04 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:46:04 null: Undefined object
11:46:04 null: NULL object
11:46:04 sql: select * from `section` where id=1
11:46:04 sql: select * from `section` where id=2
11:46:04 null: NULL object
11:47:10 null: NULL object
11:47:10 sql: select * from `config` where id=1
11:47:10 null: Undefined object
11:47:10 Fel vid laddning ar användare: Ingen avnändare angavs
11:47:10 sql: select * from `page` where id=1 order by pos asc
11:47:10 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:47:10 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:47:10 null: Undefined object
11:47:10 null: NULL object
11:47:10 sql: select * from `section` where id=1
11:47:10 null: NULL object
11:47:10 sql: select * from `section` where id=2
11:47:51 null: NULL object
11:47:51 sql: select * from `config` where id=1
11:47:51 null: Undefined object
11:47:51 sql: select * from `page` where id=1 order by pos asc
11:47:51 Fel vid laddning ar användare: Ingen avnändare angavs
11:47:51 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:47:51 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:47:51 null: Undefined object
11:47:51 null: NULL object
11:47:51 sql: select * from `section` where id=1
11:47:51 sql: select * from `section` where id=2
11:47:51 null: NULL object
11:55:37 null: NULL object
11:55:37 sql: select * from `config` where id=1
11:55:38 null: Undefined object
11:55:38 sql: select * from `page` where id=1 order by pos asc
11:55:38 Fel vid laddning ar användare: Ingen avnändare angavs
11:55:38 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
11:55:38 null: Undefined object
11:55:38 sql: select `id` from `section` where page_id=1 order by `pos` asc
11:55:38 null: NULL object
11:55:38 sql: select * from `section` where id=1
11:55:38 sql: select * from `section` where id=2
11:55:38 null: NULL object
11:55:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
11:55:47 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
11:55:47 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
11:55:47 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
11:55:50 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
12:36:03 null: NULL object
12:36:03 sql: select * from `config` where id=1
12:36:03 null: Undefined object
12:36:03 Fel vid laddning ar användare: Ingen avnändare angavs
12:36:03 sql: select * from `page` where id=1 order by pos asc
12:36:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
12:36:04 sql: select `id` from `section` where page_id=1 order by `pos` asc
12:36:04 null: Undefined object
12:36:04 null: NULL object
12:36:04 sql: select * from `section` where id=1
12:36:04 sql: select * from `section` where id=2
12:36:04 null: NULL object
12:36:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
12:36:10 null: Undefined object
12:42:14 null: NULL object
12:42:14 sql: select * from `config` where id=1
12:42:14 null: Undefined object
12:42:14 Fel vid laddning ar användare: Ingen avnändare angavs
12:42:14 sql: select * from `page` where id=1 order by pos asc
12:42:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
12:42:14 sql: select `id` from `section` where page_id=1 order by `pos` asc
12:42:14 null: Undefined object
12:42:14 null: NULL object
12:42:14 sql: select * from `section` where id=1
12:42:14 null: NULL object
12:42:14 sql: select * from `section` where id=2
12:50:42 null: NULL object
12:50:42 sql: select * from `config` where id=1
12:50:42 null: Undefined object
12:50:42 sql: select * from `page` where id=1 order by pos asc
12:50:42 Fel vid laddning ar användare: Ingen avnändare angavs
12:50:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
12:50:42 sql: select `id` from `section` where page_id=1 order by `pos` asc
12:50:42 null: Undefined object
12:50:42 null: NULL object
12:50:42 sql: select * from `section` where id=1
12:50:42 sql: select * from `section` where id=2
12:50:42 null: NULL object
13:11:52 null: NULL object
13:11:52 sql: select * from `config` where id=1
13:11:52 null: Undefined object
13:11:52 Fel vid laddning ar användare: Ingen avnändare angavs
13:11:52 sql: select * from `page` where id=1 order by pos asc
13:11:52 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:11:53 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:11:53 null: Undefined object
13:11:53 null: NULL object
13:11:53 sql: select * from `section` where id=1
13:11:53 null: NULL object
13:11:53 sql: select * from `section` where id=2
13:12:37 null: NULL object
13:12:37 sql: select * from `config` where id=1
13:12:37 null: Undefined object
13:12:37 sql: select * from `page` where id=1 order by pos asc
13:12:37 Fel vid laddning ar användare: Ingen avnändare angavs
13:12:37 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:12:37 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:12:37 null: Undefined object
13:12:37 null: NULL object
13:12:37 sql: select * from `section` where id=1
13:12:37 sql: select * from `section` where id=2
13:12:37 null: NULL object
13:13:47 null: NULL object
13:13:47 sql: select * from `config` where id=1
13:13:47 null: Undefined object
13:13:47 Fel vid laddning ar användare: Ingen avnändare angavs
13:13:47 sql: select * from `page` where id=1 order by pos asc
13:13:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:13:48 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:13:48 null: Undefined object
13:13:48 null: NULL object
13:13:48 sql: select * from `section` where id=1
13:13:48 null: NULL object
13:13:48 sql: select * from `section` where id=2
13:15:27 null: NULL object
13:15:27 sql: select * from `config` where id=1
13:15:27 null: Undefined object
13:15:27 sql: select * from `page` where id=1 order by pos asc
13:15:27 Fel vid laddning ar användare: Ingen avnändare angavs
13:15:27 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:15:27 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:15:27 null: Undefined object
13:15:27 null: NULL object
13:15:27 sql: select * from `section` where id=1
13:15:27 sql: select * from `section` where id=2
13:15:27 null: NULL object
13:16:31 null: NULL object
13:16:31 sql: select * from `config` where id=1
13:16:31 null: Undefined object
13:16:31 Fel vid laddning ar användare: Ingen avnändare angavs
13:16:31 sql: select * from `page` where id=1 order by pos asc
13:16:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:16:31 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:16:31 null: Undefined object
13:16:31 null: NULL object
13:16:31 sql: select * from `section` where id=1
13:16:31 sql: select * from `section` where id=2
13:16:31 null: NULL object
13:16:33 null: NULL object
13:18:34 null: NULL object
13:18:34 sql: select * from `config` where id=1
13:18:34 null: Undefined object
13:18:34 Fel vid laddning ar användare: Ingen avnändare angavs
13:18:34 sql: select * from `page` where id=1 order by pos asc
13:18:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:18:34 sql: select `id` from `section` where page_id=1 order by `pos` asc
13:18:34 null: Undefined object
13:18:34 null: NULL object
13:18:34 sql: select * from `section` where id=1
13:18:34 sql: select * from `section` where id=2
13:18:34 null: NULL object
13:18:39 null: NULL object
14:23:30 null: NULL object
14:23:30 sql: select * from `config` where id=1
14:23:30 null: Undefined object
14:23:30 sql: select * from `page` where id=1 order by pos asc
14:23:30 Fel vid laddning ar användare: Ingen avnändare angavs
14:23:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:23:30 sql: select `id` from `section` where page_id=1 order by `pos` asc
14:23:30 null: Undefined object
14:23:30 null: NULL object
14:23:30 null: NULL object
14:23:30 sql: select * from `section` where id=1
14:23:30 sql: select * from `section` where id=2
14:23:33 null: NULL object
14:24:18 null: NULL object
14:24:18 sql: select * from `config` where id=1
14:24:18 null: Undefined object
14:24:18 Fel vid laddning ar användare: Ingen avnändare angavs
14:24:18 sql: select * from `page` where id=1 order by pos asc
14:24:18 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:24:18 sql: select `id` from `section` where page_id=1 order by `pos` asc
14:24:18 null: Undefined object
14:24:18 null: NULL object
14:24:18 sql: select * from `section` where id=1
14:24:18 sql: select * from `section` where id=2
14:24:18 null: NULL object
14:24:22 null: NULL object
17:11:14 null: NULL object
17:11:14 sql: select * from `config` where id=1
17:11:14 null: Undefined object
17:11:14 Fel vid laddning ar användare: Ingen avnändare angavs
17:11:14 sql: select * from `page` where id=1 order by pos asc
17:11:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:11:14 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:11:14 null: Undefined object
17:11:14 null: NULL object
17:11:14 sql: select * from `section` where id=1
17:11:14 sql: select * from `section` where id=2
17:11:14 null: NULL object
17:11:15 null: NULL object
17:14:28 null: NULL object
17:14:28 sql: select * from `config` where id=1
17:14:28 null: Undefined object
17:14:28 sql: select * from `page` where id=1 order by pos asc
17:14:28 Fel vid laddning ar användare: Ingen avnändare angavs
17:14:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:14:28 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:14:28 null: Undefined object
17:14:28 null: NULL object
17:14:28 sql: select * from `section` where id=1
17:14:28 sql: select * from `section` where id=2
17:14:28 null: NULL object
17:14:29 null: NULL object
17:15:26 null: NULL object
17:15:26 sql: select * from `config` where id=1
17:15:26 null: Undefined object
17:15:26 Fel vid laddning ar användare: Ingen avnändare angavs
17:15:26 sql: select * from `page` where id=1 order by pos asc
17:15:26 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:15:26 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:15:26 null: Undefined object
17:15:26 null: NULL object
17:15:26 sql: select * from `section` where id=1
17:15:26 null: NULL object
17:15:26 sql: select * from `section` where id=2
17:15:30 null: NULL object
17:18:39 null: NULL object
17:18:39 sql: select * from `config` where id=1
17:18:39 null: Undefined object
17:18:39 Fel vid laddning ar användare: Ingen avnändare angavs
17:18:39 sql: select * from `page` where id=1 order by pos asc
17:18:39 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:18:39 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:18:39 null: Undefined object
17:18:39 null: NULL object
17:18:39 sql: select * from `section` where id=1
17:18:39 null: NULL object
17:18:39 sql: select * from `section` where id=2
17:20:30 null: NULL object
17:20:30 sql: select * from `config` where id=1
17:20:30 null: Undefined object
17:20:30 sql: select * from `page` where id=1 order by pos asc
17:20:30 Fel vid laddning ar användare: Ingen avnändare angavs
17:20:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:20:30 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:20:30 null: Undefined object
17:20:30 null: NULL object
17:20:30 null: NULL object
17:20:30 sql: select * from `section` where id=1
17:20:30 sql: select * from `section` where id=2
17:22:34 null: NULL object
17:22:34 sql: select * from `config` where id=1
17:22:34 null: Undefined object
17:22:34 Fel vid laddning ar användare: Ingen avnändare angavs
17:22:34 sql: select * from `page` where id=1 order by pos asc
17:22:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:22:34 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:22:34 null: Undefined object
17:22:34 null: NULL object
17:22:34 sql: select * from `section` where id=1
17:22:34 sql: select * from `section` where id=2
17:22:34 null: NULL object
17:23:17 null: NULL object
17:23:17 sql: select * from `config` where id=1
17:23:17 null: Undefined object
17:23:17 Fel vid laddning ar användare: Ingen avnändare angavs
17:23:17 sql: select * from `page` where id=1 order by pos asc
17:23:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:23:17 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:23:17 null: Undefined object
17:23:17 null: NULL object
17:23:17 sql: select * from `section` where id=1
17:24:10 null: NULL object
17:24:10 sql: select * from `config` where id=1
17:24:10 null: Undefined object
17:24:10 sql: select * from `page` where id=1 order by pos asc
17:24:10 Fel vid laddning ar användare: Ingen avnändare angavs
17:24:10 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:24:10 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:24:10 null: Undefined object
17:24:10 null: NULL object
17:24:10 sql: select * from `section` where id=1
17:24:28 null: NULL object
17:24:28 sql: select * from `config` where id=1
17:24:28 null: Undefined object
17:24:28 sql: select * from `page` where id=1 order by pos asc
17:24:28 Fel vid laddning ar användare: Ingen avnändare angavs
17:24:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:24:28 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:24:28 null: Undefined object
17:24:28 null: NULL object
17:24:28 sql: select * from `section` where id=1
17:24:29 null: NULL object
17:25:29 null: NULL object
17:25:29 sql: select * from `config` where id=1
17:25:29 null: Undefined object
17:25:29 sql: select * from `page` where id=1 order by pos asc
17:25:29 Fel vid laddning ar användare: Ingen avnändare angavs
17:25:29 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:25:29 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:25:29 null: Undefined object
17:25:29 null: NULL object
17:25:29 sql: select * from `section` where id=1
17:25:30 null: NULL object
17:25:48 null: NULL object
17:25:48 sql: select * from `config` where id=1
17:25:48 null: Undefined object
17:25:48 Fel vid laddning ar användare: Ingen avnändare angavs
17:25:48 sql: select * from `page` where id=1 order by pos asc
17:25:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:25:48 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:25:48 null: Undefined object
17:25:48 null: NULL object
17:25:48 sql: select * from `section` where id=1
17:25:49 null: NULL object
17:29:31 null: NULL object
17:29:31 sql: select * from `config` where id=1
17:29:31 null: Undefined object
17:29:31 Fel vid laddning ar användare: Ingen avnändare angavs
17:29:31 sql: select * from `page` where id=1 order by pos asc
17:29:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:29:31 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:29:31 null: Undefined object
17:29:31 null: NULL object
17:29:31 sql: select * from `section` where id=1
17:29:32 null: NULL object
17:29:33 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:29:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:29:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:29:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:29:41 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
17:32:43 null: NULL object
17:32:43 sql: select * from `config` where id=1
17:32:44 null: Undefined object
17:32:44 Fel vid laddning ar användare: Ingen avnändare angavs
17:32:44 sql: select * from `page` where id=1 order by pos asc
17:32:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:32:44 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:32:44 null: Undefined object
17:32:44 null: NULL object
17:32:44 sql: select * from `section` where id=1
17:32:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:32:53 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:32:53 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:32:53 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:32:57 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
17:34:05 null: NULL object
17:34:05 sql: select * from `config` where id=1
17:34:05 null: Undefined object
17:34:05 sql: select * from `page` where id=1 order by pos asc
17:34:05 Fel vid laddning ar användare: Ingen avnändare angavs
17:34:05 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:34:06 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:34:06 null: Undefined object
17:34:06 null: NULL object
17:34:06 sql: select * from `section` where id=1
17:34:07 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:34:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:34:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:34:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:34:16 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
17:34:16 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
17:57:10 null: NULL object
17:57:10 sql: select * from `config` where id=1
17:57:10 null: Undefined object
17:57:10 Fel vid laddning ar användare: Ingen avnändare angavs
17:57:10 sql: select * from `page` where id=1 order by pos asc
17:57:10 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:57:10 sql: select `id` from `section` where page_id=1 order by `pos` asc
17:57:10 null: Undefined object
17:57:10 null: NULL object
17:57:10 sql: select * from `section` where id=1
17:57:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:57:15 null: Undefined object
18:36:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:44:09 null: NULL object
18:44:09 sql: select * from `config` where id=1
18:44:09 null: Undefined object
18:44:09 Fel vid laddning ar användare: Ingen avnändare angavs
18:44:09 sql: select * from `page` where id=1 order by pos asc
18:44:09 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:44:09 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:44:09 null: Undefined object
18:44:09 null: NULL object
18:44:09 sql: select * from `section` where id=1
18:44:09 null: NULL object
18:44:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:44:13 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:44:13 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:44:20 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,1,'{"align":{"value":"left","text":""},"text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:45:27 null: NULL object
18:45:27 sql: select * from `config` where id=1
18:45:27 null: Undefined object
18:45:27 sql: select * from `page` where id=1 order by pos asc
18:45:27 Fel vid laddning ar användare: Ingen avnändare angavs
18:45:27 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:45:27 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:45:27 null: Undefined object
18:45:27 null: NULL object
18:45:27 sql: select * from `section` where id=1
18:45:27 sql: select * from `section` where id=3
18:45:27 null: NULL object
18:45:28 null: NULL object
18:46:58 null: NULL object
18:46:58 sql: select * from `config` where id=1
18:46:58 null: Undefined object
18:46:58 sql: select * from `page` where id=1 order by pos asc
18:46:58 Fel vid laddning ar användare: Ingen avnändare angavs
18:46:58 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:46:58 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:46:58 null: Undefined object
18:46:58 null: NULL object
18:46:58 sql: select * from `section` where id=1
18:46:58 sql: select * from `section` where id=3
18:46:58 null: NULL object
18:46:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:46:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:07 verify_user: [object Object]
18:47:07 null: Undefined object
18:47:13 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:18 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"align":{"value":"left","text":""},"text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:49:31 null: NULL object
18:49:31 sql: select * from `config` where id=1
18:49:31 null: Undefined object
18:49:31 Fel vid laddning ar användare: Ingen avnändare angavs
18:49:31 sql: select * from `page` where id=1 order by pos asc
18:49:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:49:31 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:49:31 null: Undefined object
18:49:31 null: NULL object
18:49:31 sql: select * from `section` where id=1
18:49:31 null: NULL object
18:49:31 sql: select * from `section` where id=3
18:49:31 null: NULL object
18:49:31 sql: select * from `section` where id=4
18:49:34 null: NULL object
18:49:34 sql: select * from `config` where id=1
18:49:34 null: Undefined object
18:49:34 Fel vid laddning ar användare: Ingen avnändare angavs
18:49:34 sql: select * from `page` where id=1 order by pos asc
18:49:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:49:34 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:49:34 null: Undefined object
18:49:34 null: NULL object
18:49:34 sql: select * from `section` where id=1
18:49:34 sql: select * from `section` where id=3
18:49:34 null: NULL object
18:49:34 null: NULL object
18:49:34 sql: select * from `section` where id=4
18:49:35 null: NULL object
18:58:17 null: NULL object
18:58:17 sql: select * from `config` where id=1
18:58:17 null: Undefined object
18:58:17 Fel vid laddning ar användare: Ingen avnändare angavs
18:58:17 sql: select * from `page` where id=1 order by pos asc
18:58:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:58:18 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:58:18 null: Undefined object
18:58:18 null: NULL object
18:58:18 sql: select * from `section` where id=1
18:58:18 sql: select * from `section` where id=3
18:58:18 null: NULL object
18:58:18 sql: select * from `section` where id=4
18:58:18 null: NULL object
18:58:53 null: NULL object
18:58:53 sql: select * from `config` where id=1
18:58:54 null: Undefined object
18:58:54 sql: select * from `page` where id=1 order by pos asc
18:58:54 Fel vid laddning ar användare: Ingen avnändare angavs
18:58:54 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:58:54 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:58:54 null: Undefined object
18:58:54 null: NULL object
18:58:54 sql: select * from `section` where id=1
18:58:54 sql: select * from `section` where id=3
18:58:54 null: NULL object
18:58:54 null: NULL object
18:58:54 sql: select * from `section` where id=4
18:59:18 null: NULL object
18:59:18 sql: select * from `config` where id=1
18:59:19 null: Undefined object
18:59:19 Fel vid laddning ar användare: Ingen avnändare angavs
18:59:19 sql: select * from `page` where id=1 order by pos asc
18:59:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:59:19 sql: select `id` from `section` where page_id=1 order by `pos` asc
18:59:19 null: Undefined object
18:59:19 null: NULL object
18:59:19 sql: select * from `section` where id=1
18:59:19 sql: select * from `section` where id=3
18:59:19 null: NULL object
18:59:19 null: NULL object
18:59:19 sql: select * from `section` where id=4
19:01:11 null: NULL object
19:01:11 sql: select * from `config` where id=1
19:01:12 null: Undefined object
19:01:12 Fel vid laddning ar användare: Ingen avnändare angavs
19:01:12 sql: select * from `page` where id=1 order by pos asc
19:01:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
19:01:12 sql: select `id` from `section` where page_id=1 order by `pos` asc
19:01:12 null: Undefined object
19:01:12 null: NULL object
19:01:12 sql: select * from `section` where id=1
19:01:12 sql: select * from `section` where id=3
19:01:12 null: NULL object
19:01:12 null: NULL object
19:01:12 sql: select * from `section` where id=4
19:10:44 null: NULL object
19:10:44 sql: select * from `config` where id=1
19:10:45 null: Undefined object
19:10:45 Fel vid laddning ar användare: Ingen avnändare angavs
19:10:45 sql: select * from `page` where id=1 order by pos asc
19:10:45 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
19:10:45 sql: select `id` from `section` where page_id=1 order by `pos` asc
19:10:45 null: Undefined object
19:10:45 null: NULL object
19:10:45 sql: select * from `section` where id=1
19:10:45 sql: select * from `section` where id=3
19:10:45 null: NULL object
19:10:45 null: NULL object
19:10:45 sql: select * from `section` where id=4
20:24:47 null: NULL object
20:24:47 sql: select * from `config` where id=1
20:24:48 null: Undefined object
20:24:48 Fel vid laddning ar användare: Ingen avnändare angavs
20:24:48 sql: select * from `page` where id=1 order by pos asc
20:24:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:24:48 sql: select `id` from `section` where page_id=1 order by `pos` asc
20:24:48 null: Undefined object
20:24:48 null: NULL object
20:24:48 sql: select * from `section` where id=1
20:24:48 sql: select * from `section` where id=3
20:24:48 null: NULL object
20:24:48 null: NULL object
20:24:48 sql: select * from `section` where id=4
20:26:19 null: NULL object
20:26:19 sql: select * from `config` where id=1
20:26:19 null: Undefined object
20:26:19 Fel vid laddning ar användare: Ingen avnändare angavs
20:26:19 sql: select * from `page` where id=1 order by pos asc
20:26:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:26:19 sql: select `id` from `section` where page_id=1 order by `pos` asc
20:26:19 null: Undefined object
20:26:19 null: NULL object
20:26:19 sql: select * from `section` where id=1
20:26:19 sql: select * from `section` where id=3
20:26:19 null: NULL object
20:26:19 null: NULL object
20:26:19 sql: select * from `section` where id=4
20:37:49 null: NULL object
20:37:49 sql: select * from `config` where id=1
20:37:49 null: Undefined object
20:37:49 Fel vid laddning ar användare: Ingen avnändare angavs
20:38:45 null: NULL object
20:38:45 sql: select * from `config` where id=1
20:38:45 null: Undefined object
20:38:45 Fel vid laddning ar användare: Ingen avnändare angavs
20:38:51 null: NULL object
20:38:51 sql: select * from `config` where id=1
20:38:51 null: Undefined object
20:38:51 sql: select * from `page` where id=1 order by pos asc
20:38:51 Fel vid laddning ar användare: Ingen avnändare angavs
20:40:39 null: NULL object
20:40:39 sql: select * from `config` where id=1
20:40:39 null: Undefined object
20:40:39 Fel vid laddning ar användare: Ingen avnändare angavs
20:40:39 sql: select * from `page` where id=1 order by pos asc
20:41:02 null: NULL object
20:41:02 sql: select * from `config` where id=1
20:41:02 null: Undefined object
20:41:02 sql: select * from `page` where id=1 order by pos asc
20:41:02 Fel vid laddning ar användare: Ingen avnändare angavs
20:41:15 null: NULL object
20:41:15 sql: select * from `config` where id=1
20:41:15 null: Undefined object
20:41:15 sql: select * from `page` where id=1 order by pos asc
20:41:15 Fel vid laddning ar användare: Ingen avnändare angavs
20:42:29 null: NULL object
20:42:29 sql: select * from `config` where id=1
20:42:29 null: Undefined object
20:42:29 sql: select * from `page` where id=1 order by pos asc
20:42:29 Fel vid laddning ar användare: Ingen avnändare angavs
20:42:52 null: NULL object
20:42:52 sql: select * from `config` where id=1
20:42:52 null: Undefined object
20:42:52 sql: select * from `page` where id=1 order by pos asc
20:42:52 Fel vid laddning ar användare: Ingen avnändare angavs
20:43:18 null: NULL object
20:43:18 sql: select * from `config` where id=1
20:43:18 null: Undefined object
20:43:18 sql: select * from `page` where id=1 order by pos asc
20:43:18 Fel vid laddning ar användare: Ingen avnändare angavs
20:43:31 null: NULL object
20:43:31 sql: select * from `config` where id=1
20:43:31 null: Undefined object
20:43:31 Fel vid laddning ar användare: Ingen avnändare angavs
20:43:31 sql: select * from `page` where id=1 order by pos asc
20:43:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:43:50 null: NULL object
20:43:50 sql: select * from `config` where id=1
20:43:50 null: Undefined object
20:43:50 sql: select * from `page` where id=1 order by pos asc
20:43:50 Fel vid laddning ar användare: Ingen avnändare angavs
20:43:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:43:50 sql: select `id` from `section` where page_id=1 order by `pos` asc
20:43:50 null: Undefined object
20:43:50 null: NULL object
20:43:50 sql: select * from `section` where id=1
20:43:50 sql: select * from `section` where id=3
20:43:50 null: NULL object
20:43:50 null: NULL object
20:43:50 sql: select * from `section` where id=4
08:41:07 null: NULL object
08:41:07 sql: select * from `config` where id=1
08:41:08 null: Undefined object
08:41:08 sql: select * from `page` where id=1 order by pos asc
08:41:08 Fel vid laddning ar användare: Ingen avnändare angavs
08:41:08 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:41:08 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
08:41:08 null: Undefined object
08:41:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
08:41:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
08:41:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
08:41:28 verify_user: [object Object]
08:41:28 null: Undefined object
08:41:31 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
08:41:36 null: NULL object
08:41:36 sql: select * from `config` where id=1
08:41:36 null: Undefined object
08:41:36 Fel vid laddning ar användare: Ingen avnändare angavs
08:41:36 sql: select * from `page` where id=1 order by pos asc
08:41:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:41:36 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
08:41:36 null: Undefined object
09:50:15 null: NULL object
09:50:15 sql: select * from `config` where id=1
09:50:15 null: Undefined object
09:50:15 sql: select * from `page` where id=1 order by pos asc
09:50:15 Fel vid laddning ar användare: Ingen avnändare angavs
09:50:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:50:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
09:50:15 null: Undefined object
09:50:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:50:19 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:50:19 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:54:19 sql: select * from `config` where id=1
09:54:19 null: NULL object
09:54:19 null: Undefined object
09:54:19 Fel vid laddning ar användare: Ingen avnändare angavs
09:54:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:54:19 sql: select * from `page` where id=1 order by pos asc
09:54:19 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
09:54:19 null: Undefined object
10:00:33 null: NULL object
10:00:33 sql: select * from `config` where id=1
10:00:33 null: Undefined object
10:00:33 Fel vid laddning ar användare: Ingen avnändare angavs
10:00:33 sql: select * from `page` where id=1 order by pos asc
10:00:33 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:00:33 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:00:33 null: Undefined object
10:03:33 null: NULL object
10:03:33 sql: select * from `config` where id=1
10:03:33 null: Undefined object
10:03:33 sql: select * from `page` where id=1 order by pos asc
10:03:33 Fel vid laddning ar användare: Ingen avnändare angavs
10:03:33 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:03:33 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:03:33 null: Undefined object
10:08:14 null: NULL object
10:08:14 sql: select * from `config` where id=1
10:08:14 null: NULL object
10:08:14 null: Undefined object
10:08:14 Fel vid laddning ar användare: Ingen avnändare angavs
10:08:14 sql: select * from `page` where id=1 order by pos asc
10:08:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:08:14 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:08:14 null: Undefined object
10:09:00 null: NULL object
10:09:00 sql: select * from `config` where id=1
10:09:01 null: Undefined object
10:09:01 Fel vid laddning ar användare: Ingen avnändare angavs
10:09:01 sql: select * from `page` where id=1 order by pos asc
10:09:01 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:09:01 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:09:01 null: Undefined object
10:09:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:09:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:09:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:09:15 null: NULL object
10:09:15 sql: select * from `config` where id=1
10:09:15 null: Undefined object
10:09:15 Fel vid laddning ar användare: Ingen avnändare angavs
10:09:15 sql: select * from `page` where id=1 order by pos asc
10:09:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:09:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:09:15 null: Undefined object
10:11:03 null: NULL object
10:11:03 sql: select * from `config` where id=1
10:11:03 null: Undefined object
10:11:03 Fel vid laddning ar användare: Ingen avnändare angavs
10:11:03 sql: select * from `page` where id=1 order by pos asc
10:11:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:11:03 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:11:03 null: Undefined object
10:11:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:11:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:11:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:11:46 null: NULL object
10:11:46 sql: select * from `config` where id=1
10:11:47 null: Undefined object
10:11:47 sql: select * from `page` where id=1 order by pos asc
10:11:47 Fel vid laddning ar användare: Ingen avnändare angavs
10:11:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:11:47 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:11:47 null: Undefined object
10:12:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:12:10 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:12:10 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:13:48 null: NULL object
10:13:48 sql: select * from `config` where id=1
10:13:48 null: Undefined object
10:13:48 Fel vid laddning ar användare: Ingen avnändare angavs
10:13:48 sql: select * from `page` where id=1 order by pos asc
10:13:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:13:48 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:13:48 null: Undefined object
10:13:50 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:13:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:13:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:17:39 null: NULL object
10:17:39 sql: select * from `config` where id=1
10:17:40 null: Undefined object
10:17:40 Fel vid laddning ar användare: Ingen avnändare angavs
10:17:40 sql: select * from `page` where id=1 order by pos asc
10:17:40 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:17:40 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:17:40 null: Undefined object
10:17:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:17:43 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:17:43 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:18:30 null: NULL object
10:18:30 sql: select * from `config` where id=1
10:18:30 null: Undefined object
10:18:30 Fel vid laddning ar användare: Ingen avnändare angavs
10:18:30 sql: select * from `page` where id=1 order by pos asc
10:18:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:18:30 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:18:30 null: Undefined object
10:19:03 null: NULL object
10:19:03 sql: select * from `config` where id=1
10:19:03 null: Undefined object
10:19:03 Fel vid laddning ar användare: Ingen avnändare angavs
10:19:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:19:03 sql: select * from `page` where id=1 order by pos asc
10:19:03 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:19:03 null: Undefined object
10:19:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:19:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:19:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:20:03 null: NULL object
10:20:03 sql: select * from `config` where id=1
10:20:03 null: Undefined object
10:20:03 Fel vid laddning ar användare: Ingen avnändare angavs
10:20:03 sql: select * from `page` where id=1 order by pos asc
10:20:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:20:03 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
10:20:03 null: Undefined object
10:20:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:20:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
10:20:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:13:02 null: NULL object
13:13:02 sql: select * from `config` where id=1
13:13:02 null: Undefined object
13:13:02 Fel vid laddning ar användare: Ingen avnändare angavs
13:13:02 sql: select * from `page` where id=1 order by pos asc
13:13:02 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:13:02 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:13:02 null: Undefined object
13:13:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:14:45 null: NULL object
13:14:45 sql: select * from `config` where id=1
13:14:45 null: Undefined object
13:14:45 Fel vid laddning ar användare: Ingen avnändare angavs
13:14:45 sql: select * from `page` where id=1 order by pos asc
13:14:45 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:14:45 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:14:45 null: Undefined object
13:14:47 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:15:18 null: NULL object
13:15:18 sql: select * from `config` where id=1
13:15:19 null: Undefined object
13:15:19 Fel vid laddning ar användare: Ingen avnändare angavs
13:15:19 sql: select * from `page` where id=1 order by pos asc
13:15:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:15:19 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:15:19 null: Undefined object
13:15:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:15:36 null: NULL object
13:15:36 sql: select * from `config` where id=1
13:15:36 null: Undefined object
13:15:36 Fel vid laddning ar användare: Ingen avnändare angavs
13:15:36 sql: select * from `page` where id=1 order by pos asc
13:15:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:15:36 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:15:36 null: Undefined object
13:18:16 null: NULL object
13:18:16 sql: select * from `config` where id=1
13:18:16 null: Undefined object
13:18:16 Fel vid laddning ar användare: Ingen avnändare angavs
13:18:16 sql: select * from `page` where id=1 order by pos asc
13:18:16 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:18:16 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:18:16 null: Undefined object
13:18:18 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:20:31 null: NULL object
13:20:31 sql: select * from `config` where id=1
13:20:31 null: Undefined object
13:20:31 sql: select * from `page` where id=1 order by pos asc
13:20:31 Fel vid laddning ar användare: Ingen avnändare angavs
13:20:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:20:31 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:20:31 null: Undefined object
13:20:32 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:21:03 null: NULL object
13:21:03 sql: select * from `config` where id=1
13:21:03 null: Undefined object
13:21:03 Fel vid laddning ar användare: Ingen avnändare angavs
13:21:03 sql: select * from `page` where id=1 order by pos asc
13:21:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:21:03 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
13:21:03 null: Undefined object
13:21:24 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:13:02 null: NULL object
17:13:02 sql: select * from `config` where id=1
17:13:02 null: Undefined object
17:13:02 sql: select * from `page` where id=1 order by pos asc
17:13:02 Fel vid laddning ar användare: Ingen avnändare angavs
17:13:02 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:13:02 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:13:02 null: Undefined object
17:14:06 null: NULL object
17:14:06 sql: select * from `config` where id=1
17:14:06 null: Undefined object
17:14:06 Fel vid laddning ar användare: Ingen avnändare angavs
17:14:06 sql: select * from `page` where id=1 order by pos asc
17:14:06 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:14:06 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:14:06 null: Undefined object
17:16:24 null: NULL object
17:16:24 sql: select * from `config` where id=1
17:16:24 null: Undefined object
17:16:24 sql: select * from `page` where id=1 order by pos asc
17:16:24 Fel vid laddning ar användare: Ingen avnändare angavs
17:16:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:16:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:16:24 null: Undefined object
17:17:00 null: NULL object
17:17:00 sql: select * from `config` where id=1
17:17:00 null: Undefined object
17:17:00 Fel vid laddning ar användare: Ingen avnändare angavs
17:17:00 sql: select * from `page` where id=1 order by pos asc
17:17:00 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:17:00 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:17:00 null: Undefined object
17:18:27 null: NULL object
17:18:27 sql: select * from `config` where id=1
17:18:27 null: Undefined object
17:18:27 Fel vid laddning ar användare: Ingen avnändare angavs
17:18:27 sql: select * from `page` where id=1 order by pos asc
17:18:27 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:18:27 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:18:27 null: Undefined object
17:18:49 null: NULL object
17:18:49 sql: select * from `config` where id=1
17:19:20 null: Undefined object
17:19:20 sql: select * from `page` where id=1 order by pos asc
17:19:20 Fel vid laddning ar användare: Ingen avnändare angavs
17:19:20 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:19:20 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:19:20 null: Undefined object
17:19:24 null: NULL object
17:19:24 sql: select * from `config` where id=1
17:19:24 null: Undefined object
17:19:24 Fel vid laddning ar användare: Ingen avnändare angavs
17:19:24 sql: select * from `page` where id=1 order by pos asc
17:19:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:19:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:19:24 null: Undefined object
17:21:50 null: NULL object
17:21:50 sql: select * from `config` where id=1
17:21:51 null: Undefined object
17:21:51 Fel vid laddning ar användare: Ingen avnändare angavs
17:21:51 sql: select * from `page` where id=1 order by pos asc
17:21:51 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:21:51 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:21:51 null: Undefined object
17:23:53 null: NULL object
17:23:53 sql: select * from `config` where id=1
17:23:53 null: Undefined object
17:23:53 sql: select * from `page` where id=1 order by pos asc
17:23:53 Fel vid laddning ar användare: Ingen avnändare angavs
17:23:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:23:53 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:23:53 null: Undefined object
17:25:15 null: NULL object
17:25:15 sql: select * from `config` where id=1
17:25:15 null: Undefined object
17:25:15 Fel vid laddning ar användare: Ingen avnändare angavs
17:25:15 sql: select * from `page` where id=1 order by pos asc
17:25:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:25:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:25:15 null: Undefined object
17:25:44 null: NULL object
17:25:44 sql: select * from `config` where id=1
17:25:44 null: Undefined object
17:25:44 Fel vid laddning ar användare: Ingen avnändare angavs
17:25:44 sql: select * from `page` where id=1 order by pos asc
17:25:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:25:44 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:25:44 null: Undefined object
17:26:34 null: NULL object
17:26:34 sql: select * from `config` where id=1
17:26:34 null: Undefined object
17:26:34 Fel vid laddning ar användare: Ingen avnändare angavs
17:26:34 sql: select * from `page` where id=1 order by pos asc
17:26:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:26:34 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:26:34 null: Undefined object
17:27:06 null: NULL object
17:27:06 sql: select * from `config` where id=1
17:27:06 null: Undefined object
17:27:06 Fel vid laddning ar användare: Ingen avnändare angavs
17:27:06 sql: select * from `page` where id=1 order by pos asc
17:27:06 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:27:06 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:27:06 null: Undefined object
17:28:22 null: NULL object
17:28:22 sql: select * from `config` where id=1
17:28:22 null: Undefined object
17:28:22 Fel vid laddning ar användare: Ingen avnändare angavs
17:28:22 sql: select * from `page` where id=1 order by pos asc
17:28:22 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:28:22 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:28:22 null: Undefined object
17:32:15 null: NULL object
17:32:15 sql: select * from `config` where id=1
17:32:15 null: Undefined object
17:32:15 Fel vid laddning ar användare: Ingen avnändare angavs
17:32:15 sql: select * from `page` where id=1 order by pos asc
17:32:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:32:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:32:15 null: Undefined object
17:32:26 null: NULL object
17:32:26 sql: select * from `config` where id=1
17:32:26 null: Undefined object
17:32:26 sql: select * from `page` where id=1 order by pos asc
17:32:26 Fel vid laddning ar användare: Ingen avnändare angavs
17:32:26 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:32:26 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:32:26 null: Undefined object
17:33:55 null: NULL object
17:33:55 sql: select * from `config` where id=1
17:33:55 null: Undefined object
17:33:55 Fel vid laddning ar användare: Ingen avnändare angavs
17:33:55 sql: select * from `page` where id=1 order by pos asc
17:33:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:33:55 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:33:55 null: Undefined object
17:33:58 null: NULL object
17:33:58 sql: select * from `config` where id=1
17:33:58 null: Undefined object
17:33:58 Fel vid laddning ar användare: Ingen avnändare angavs
17:33:58 sql: select * from `page` where id=1 order by pos asc
17:33:58 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:33:58 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:33:58 null: Undefined object
17:34:41 null: NULL object
17:34:41 sql: select * from `config` where id=1
17:34:41 null: Undefined object
17:34:41 Fel vid laddning ar användare: Ingen avnändare angavs
17:34:41 sql: select * from `page` where id=1 order by pos asc
17:34:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:34:41 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:34:41 null: Undefined object
17:36:48 null: NULL object
17:36:48 sql: select * from `config` where id=1
17:36:49 null: Undefined object
17:36:49 Fel vid laddning ar användare: Ingen avnändare angavs
17:36:49 sql: select * from `page` where id=1 order by pos asc
17:36:49 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:36:49 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:36:49 null: Undefined object
17:36:51 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:36:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:36:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:40:12 null: NULL object
17:40:12 sql: select * from `config` where id=1
17:40:12 null: Undefined object
17:40:12 Fel vid laddning ar användare: Ingen avnändare angavs
17:40:12 sql: select * from `page` where id=1 order by pos asc
17:40:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:40:12 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:40:12 null: Undefined object
17:40:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:40:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:40:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = {
                                value: target.options[target.selectedIndex].value,
                                text: target.options[target.selectedIndex].innerText
                            } 
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= { value: field.selected, text: '' };
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:43:24 null: NULL object
17:43:24 sql: select * from `config` where id=1
17:43:24 null: Undefined object
17:43:24 sql: select * from `page` where id=1 order by pos asc
17:43:24 Fel vid laddning ar användare: Ingen avnändare angavs
17:43:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:43:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:43:24 null: Undefined object
17:43:28 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:43:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:44:28 null: NULL object
17:44:29 sql: select * from `config` where id=1
17:44:29 null: Undefined object
17:44:29 sql: select * from `page` where id=1 order by pos asc
17:44:29 Fel vid laddning ar användare: Ingen avnändare angavs
17:44:29 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:44:29 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:44:29 null: Undefined object
17:44:34 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:46:07 null: NULL object
17:46:07 sql: select * from `config` where id=1
17:46:07 null: Undefined object
17:46:07 sql: select * from `page` where id=1 order by pos asc
17:46:07 Fel vid laddning ar användare: Ingen avnändare angavs
17:46:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:46:07 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:46:07 null: Undefined object
17:46:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:46:35 null: NULL object
17:46:35 sql: select * from `config` where id=1
17:46:35 null: Undefined object
17:46:35 Fel vid laddning ar användare: Ingen avnändare angavs
17:46:35 sql: select * from `page` where id=1 order by pos asc
17:46:35 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:46:35 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:46:35 null: Undefined object
17:46:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:47:02 null: NULL object
17:47:02 sql: select * from `config` where id=1
17:47:03 null: Undefined object
17:47:03 Fel vid laddning ar användare: Ingen avnändare angavs
17:47:03 sql: select * from `page` where id=1 order by pos asc
17:47:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:47:03 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:47:03 null: Undefined object
17:47:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:49:10 null: NULL object
17:49:10 sql: select * from `config` where id=1
17:49:10 null: Undefined object
17:49:10 Fel vid laddning ar användare: Ingen avnändare angavs
17:49:10 sql: select * from `page` where id=1 order by pos asc
17:49:10 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:49:10 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:49:10 null: Undefined object
17:49:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:50:02 null: NULL object
17:50:02 sql: select * from `config` where id=1
17:50:02 null: Undefined object
17:50:02 Fel vid laddning ar användare: Ingen avnändare angavs
17:50:02 sql: select * from `page` where id=1 order by pos asc
17:50:02 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:50:02 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:50:02 null: Undefined object
17:50:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:51:28 null: NULL object
17:51:28 sql: select * from `config` where id=1
17:51:28 null: Undefined object
17:51:28 sql: select * from `page` where id=1 order by pos asc
17:51:28 Fel vid laddning ar användare: Ingen avnändare angavs
17:51:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:51:28 null: Undefined object
17:51:28 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:51:29 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:53:23 null: NULL object
17:53:23 sql: select * from `config` where id=1
17:53:23 null: Undefined object
17:53:23 sql: select * from `page` where id=1 order by pos asc
17:53:23 Fel vid laddning ar användare: Ingen avnändare angavs
17:53:23 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:53:23 null: Undefined object
17:53:23 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:53:25 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:53:55 null: NULL object
17:53:55 sql: select * from `config` where id=1
17:53:55 null: Undefined object
17:53:55 Fel vid laddning ar användare: Ingen avnändare angavs
17:53:55 sql: select * from `page` where id=1 order by pos asc
17:53:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:53:55 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:53:55 null: Undefined object
17:53:57 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:54:55 null: NULL object
17:54:55 sql: select * from `config` where id=1
17:54:55 null: Undefined object
17:54:55 sql: select * from `page` where id=1 order by pos asc
17:54:55 Fel vid laddning ar användare: Ingen avnändare angavs
17:54:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:54:55 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:54:55 null: Undefined object
17:54:58 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:55:19 null: NULL object
17:55:19 sql: select * from `config` where id=1
17:55:19 null: Undefined object
17:55:19 sql: select * from `page` where id=1 order by pos asc
17:55:19 Fel vid laddning ar användare: Ingen avnändare angavs
17:55:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:55:19 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
17:55:19 null: Undefined object
17:55:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:00:07 null: NULL object
18:00:07 sql: select * from `config` where id=1
18:00:07 null: Undefined object
18:00:07 Fel vid laddning ar användare: Ingen avnändare angavs
18:00:07 sql: select * from `page` where id=1 order by pos asc
18:00:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:00:07 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:00:07 null: Undefined object
18:00:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:31:19 null: NULL object
18:31:19 sql: select * from `config` where id=1
18:31:19 null: Undefined object
18:31:19 Fel vid laddning ar användare: Ingen avnändare angavs
18:31:19 sql: select * from `page` where id=1 order by pos asc
18:31:19 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:31:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:31:19 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:31:19 null: Undefined object
18:31:24 null: NULL object
18:31:24 sql: select * from `config` where id=1
18:31:24 null: Undefined object
18:31:24 sql: select * from `page` where id=1 order by pos asc
18:31:24 Fel vid laddning ar användare: Ingen avnändare angavs
18:31:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:31:24 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:31:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:31:24 null: Undefined object
18:32:14 null: NULL object
18:32:14 sql: select * from `config` where id=1
18:32:14 null: Undefined object
18:32:14 sql: select * from `page` where id=1 order by pos asc
18:32:14 Fel vid laddning ar användare: Ingen avnändare angavs
18:32:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:32:15 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:32:15 null: Undefined object
18:32:16 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:32:18 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:32:18 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:33:00 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:33:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:33:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:34:49 null: NULL object
18:34:49 sql: select * from `config` where id=1
18:34:50 null: Undefined object
18:34:50 sql: select * from `page` where id=1 order by pos asc
18:34:50 Fel vid laddning ar användare: Ingen avnändare angavs
18:34:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:34:50 null: Undefined object
18:34:50 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:34:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:35:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:35:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:36:00 null: NULL object
18:36:01 sql: select * from `config` where id=1
18:36:01 null: Undefined object
18:36:01 Fel vid laddning ar användare: Ingen avnändare angavs
18:36:01 sql: select * from `page` where id=1 order by pos asc
18:36:01 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:36:01 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:36:01 null: Undefined object
18:36:23 null: NULL object
18:36:23 sql: select * from `config` where id=1
18:36:23 null: Undefined object
18:36:23 sql: select * from `page` where id=1 order by pos asc
18:36:23 Fel vid laddning ar användare: Ingen avnändare angavs
18:36:23 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:36:23 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:36:23 null: Undefined object
18:36:27 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:36:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:36:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:37:27 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:37:30 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:37:30 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:39:29 null: NULL object
18:39:29 sql: select * from `config` where id=1
18:39:30 null: Undefined object
18:39:30 Fel vid laddning ar användare: Ingen avnändare angavs
18:39:30 sql: select * from `page` where id=1 order by pos asc
18:39:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:39:30 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:39:30 null: Undefined object
18:41:44 null: NULL object
18:41:44 sql: select * from `config` where id=1
18:41:44 null: Undefined object
18:41:44 sql: select * from `page` where id=1 order by pos asc
18:41:44 Fel vid laddning ar användare: Ingen avnändare angavs
18:41:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:41:44 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:41:44 null: Undefined object
18:41:46 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:41:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:41:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:45:25 null: NULL object
18:45:25 sql: select * from `config` where id=1
18:45:25 null: Undefined object
18:45:25 Fel vid laddning ar användare: Ingen avnändare angavs
18:45:25 sql: select * from `page` where id=1 order by pos asc
18:45:25 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:45:25 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:45:25 null: Undefined object
18:45:27 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:45:29 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:45:29 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:46:13 null: NULL object
18:46:13 sql: select * from `config` where id=1
18:46:13 null: Undefined object
18:46:13 sql: select * from `page` where id=1 order by pos asc
18:46:13 Fel vid laddning ar användare: Ingen avnändare angavs
18:46:13 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:46:13 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:46:13 null: Undefined object
18:46:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:46:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:46:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:46:18 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:46:18 null: NULL object
18:46:18 sql: select * from `section` where id=5
18:47:46 null: NULL object
18:47:46 sql: select * from `config` where id=1
18:47:46 null: Undefined object
18:47:46 Fel vid laddning ar användare: Ingen avnändare angavs
18:47:46 sql: select * from `page` where id=1 order by pos asc
18:47:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:47:46 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:47:46 null: Undefined object
18:47:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:47:51 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:48:49 null: NULL object
18:48:49 sql: select * from `config` where id=1
18:48:49 null: Undefined object
18:48:49 Fel vid laddning ar användare: Ingen avnändare angavs
18:48:49 sql: select * from `page` where id=1 order by pos asc
18:48:49 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:48:49 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:48:49 null: Undefined object
18:48:53 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:48:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:48:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:48:56 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:51:14 null: NULL object
18:51:14 sql: select * from `config` where id=1
18:51:14 null: Undefined object
18:51:14 sql: select * from `page` where id=1 order by pos asc
18:51:14 Fel vid laddning ar användare: Ingen avnändare angavs
18:51:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:51:14 null: Undefined object
18:51:14 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:51:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:51:19 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:51:19 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:51:21 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:52:41 null: NULL object
18:52:41 sql: select * from `config` where id=1
18:52:41 null: Undefined object
18:52:41 sql: select * from `page` where id=1 order by pos asc
18:52:41 Fel vid laddning ar användare: Ingen avnändare angavs
18:52:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:52:41 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:52:41 null: Undefined object
18:52:42 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:52:44 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:52:44 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:52:45 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:56:45 null: NULL object
18:56:45 sql: select * from `section` where id=9
18:56:49 null: NULL object
18:56:49 sql: select * from `config` where id=1
18:56:50 null: Undefined object
18:56:50 sql: select * from `page` where id=1 order by pos asc
18:56:50 Fel vid laddning ar användare: Ingen avnändare angavs
18:56:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:56:50 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:56:50 null: Undefined object
18:56:52 null: NULL object
18:56:52 sql: select * from `config` where id=1
18:56:52 null: Undefined object
18:56:52 Fel vid laddning ar användare: Ingen avnändare angavs
18:56:52 sql: select * from `page` where id=1 order by pos asc
18:56:52 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:56:52 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
18:56:52 null: Undefined object
18:57:01 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:57:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:57:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:57:04 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:57:04 null: NULL object
18:57:04 sql: select * from `section` where id=10
19:01:47 null: NULL object
19:01:47 sql: select * from `config` where id=1
19:01:47 null: Undefined object
19:01:47 Fel vid laddning ar användare: Ingen avnändare angavs
19:01:47 sql: select * from `page` where id=1 order by pos asc
19:01:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
19:01:47 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
19:01:47 null: Undefined object
19:01:51 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:56 sql: insert into `section` (`page_id`,`pos`,`height`,`type`,`content`) values (1,0,20,'text','{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
19:01:56 null: NULL object
19:01:56 sql: select * from `section` where id=11
20:46:06 null: NULL object
20:46:06 sql: select * from `config` where id=1
20:46:06 null: Undefined object
20:46:06 sql: select * from `page` where id=1 order by pos asc
20:50:20 null: NULL object
20:50:20 sql: select * from `config` where id=1
20:50:20 null: Undefined object
20:50:20 sql: select * from `page` where id=1 order by pos asc
20:50:20 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:50:20 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
20:50:20 null: Undefined object
20:52:51 null: NULL object
20:52:51 sql: select * from `config` where id=1
20:52:51 null: Undefined object
20:52:51 sql: select * from `page` where id=1 order by pos asc
20:52:51 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:52:51 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
20:52:51 null: Undefined object
21:03:57 null: NULL object
21:03:57 sql: select * from `config` where id=1
21:03:57 null: Undefined object
21:03:57 sql: select * from `page` where id=1 order by pos asc
21:07:47 null: NULL object
21:07:47 sql: select * from `config` where id=1
21:07:47 null: Undefined object
21:07:47 sql: select * from `page` where id=1 order by pos asc
21:07:47 null: Undefined object
21:09:11 null: NULL object
21:09:11 sql: select * from `config` where id=1
21:09:11 null: Undefined object
21:09:11 sql: select * from `page` where id=1 order by pos asc
21:09:11 null: Undefined object
21:10:11 null: NULL object
21:10:11 sql: select * from `config` where id=1
21:10:12 null: Undefined object
21:10:12 sql: select * from `page` where id=1 order by pos asc
21:10:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:10:12 null: Undefined object
21:10:12 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:10:12 null: Undefined object
21:12:46 null: NULL object
21:12:46 sql: select * from `config` where id=1
21:12:46 null: Undefined object
21:12:46 sql: select * from `page` where id=1 order by pos asc
21:12:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:12:46 null: Undefined object
21:12:46 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:12:46 null: Undefined object
21:16:10 null: NULL object
21:16:10 sql: select * from `config` where id=1
21:16:10 null: Undefined object
21:16:10 sql: select * from `page` where id=1 order by pos asc
21:16:10 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:16:10 null: Undefined object
21:16:11 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:16:11 null: Undefined object
21:16:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:16:23 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:16:23 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:16:25 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,0,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
21:17:11 null: NULL object
21:17:11 sql: select * from `config` where id=1
21:17:11 null: Undefined object
21:17:11 sql: select * from `page` where id=1 order by pos asc
21:17:11 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:17:11 null: Undefined object
21:17:11 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:17:11 null: Undefined object
21:17:12 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:18 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:18 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:20 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,0,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
21:19:22 null: NULL object
21:19:22 sql: select * from `config` where id=1
21:19:22 null: Undefined object
21:19:22 sql: select * from `page` where id=1 order by pos asc
21:19:22 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:19:22 null: Undefined object
21:19:22 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:19:22 null: Undefined object
21:19:53 null: NULL object
21:19:53 sql: select * from `config` where id=1
21:19:53 null: Undefined object
21:19:53 sql: select * from `page` where id=1 order by pos asc
21:19:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:19:53 null: Undefined object
21:19:53 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:19:53 null: Undefined object
21:19:55 null: NULL object
21:19:55 sql: select * from `config` where id=1
21:19:55 null: Undefined object
21:19:55 sql: select * from `page` where id=1 order by pos asc
21:19:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:19:55 null: Undefined object
21:19:55 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:19:55 null: Undefined object
21:20:18 null: NULL object
21:20:18 sql: select * from `config` where id=1
21:20:18 null: Undefined object
21:20:18 sql: select * from `page` where id=1 order by pos asc
21:20:18 null: Undefined object
21:20:18 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:20:18 null: Undefined object
21:20:24 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:21:15 null: NULL object
21:21:15 sql: select * from `config` where id=1
21:21:16 null: Undefined object
21:21:16 sql: select * from `page` where id=1 order by pos asc
21:21:16 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:21:16 null: Undefined object
21:21:16 null: Undefined object
21:21:18 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:26:48 null: NULL object
21:26:48 sql: select * from `config` where id=1
21:26:49 null: Undefined object
21:26:49 sql: select * from `page` where id=1 order by pos asc
21:26:49 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:26:49 null: Undefined object
21:26:49 null: Undefined object
21:26:52 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:26:52 null: NULL object
21:26:52 sql: select * from `section` where id=1
21:26:53 null: NULL object
21:26:53 sql: select * from `section` where id=12
21:26:53 null: NULL object
21:26:53 sql: select * from `section` where id=11
21:26:53 null: NULL object
21:26:53 sql: select * from `section` where id=10
21:26:54 null: NULL object
21:26:54 sql: select * from `section` where id=9
21:26:54 null: NULL object
21:26:54 sql: select * from `section` where id=8
21:26:54 null: NULL object
21:26:54 sql: select * from `section` where id=7
21:26:54 null: NULL object
21:26:54 sql: select * from `section` where id=6
21:26:55 null: NULL object
21:26:55 sql: select * from `section` where id=5
21:26:55 null: NULL object
21:26:55 sql: select * from `section` where id=13
21:26:55 null: NULL object
21:26:55 sql: select * from `section` where id=3
21:26:55 null: NULL object
21:26:55 sql: select * from `section` where id=4
21:27:18 null: NULL object
21:27:18 sql: select * from `config` where id=1
21:27:18 null: Undefined object
21:27:18 sql: select * from `page` where id=1 order by pos asc
21:27:18 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:27:18 null: Undefined object
21:27:18 null: Undefined object
21:27:20 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:27:21 null: NULL object
21:27:21 sql: select * from `section` where id=1
21:27:22 null: NULL object
21:27:22 sql: select * from `section` where id=12
21:27:22 null: NULL object
21:27:22 sql: select * from `section` where id=11
21:27:22 null: NULL object
21:27:22 sql: select * from `section` where id=10
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=9
21:27:25 sql: select * from `section` where id=8
21:27:25 null: NULL object
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=7
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=6
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=5
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=13
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=3
21:27:25 null: NULL object
21:27:25 sql: select * from `section` where id=4
21:30:47 null: NULL object
21:30:47 sql: select * from `config` where id=1
21:30:47 null: Undefined object
21:30:47 sql: select * from `page` where id=1 order by pos asc
21:30:47 null: Undefined object
21:30:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:30:47 null: Undefined object
21:30:52 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:30:52 null: NULL object
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=1
21:30:52 sql: select * from `section` where id=12
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=11
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=10
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=9
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=8
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=7
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=6
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=5
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=13
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=3
21:30:52 null: NULL object
21:30:52 sql: select * from `section` where id=4
21:32:34 null: NULL object
21:32:34 sql: select * from `config` where id=1
21:32:34 null: Undefined object
21:32:34 null: Undefined object
21:32:34 sql: select * from `page` where id=1 order by pos asc
21:32:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:32:34 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:32:34 null: Undefined object
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=1
21:32:34 sql: select * from `section` where id=12
21:32:34 null: NULL object
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=11
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=10
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=9
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=8
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=7
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=6
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=5
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=13
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=3
21:32:34 null: NULL object
21:32:34 sql: select * from `section` where id=4
21:33:14 null: NULL object
21:33:14 sql: select * from `config` where id=1
21:33:14 null: Undefined object
21:33:14 sql: select * from `page` where id=1 order by pos asc
21:33:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:33:14 null: Undefined object
21:33:14 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:33:14 null: Undefined object
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=1
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=12
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=11
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=10
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=9
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=8
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=7
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=6
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=5
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=13
21:33:14 null: NULL object
21:33:14 sql: select * from `section` where id=3
21:33:15 null: NULL object
21:33:15 sql: select * from `section` where id=4
21:33:16 null: NULL object
21:38:49 null: NULL object
21:38:49 sql: select * from `config` where id=1
21:38:49 null: Undefined object
21:38:49 sql: select * from `page` where id=1 order by pos asc
21:38:49 null: Undefined object
21:38:49 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:38:49 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:38:49 null: Undefined object
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=1
21:38:49 sql: select * from `section` where id=12
21:38:49 null: NULL object
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=11
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=10
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=9
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=8
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=7
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=6
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=5
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=13
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=3
21:38:49 null: NULL object
21:38:49 sql: select * from `section` where id=4
21:38:50 null: NULL object
21:40:37 null: NULL object
21:40:37 sql: select * from `config` where id=1
21:40:38 null: Undefined object
21:40:38 sql: select * from `page` where id=1 order by pos asc
21:40:38 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:40:38 null: Undefined object
21:40:38 sql: select `id`,`type` from `section` where page_id=1 order by `pos` asc
21:40:38 null: Undefined object
21:40:38 null: NULL object
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=1
21:40:38 sql: select * from `section` where id=12
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=11
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=10
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=9
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=8
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=7
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=6
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=5
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=13
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=3
21:40:38 null: NULL object
21:40:38 sql: select * from `section` where id=4
21:40:39 null: NULL object
16:59:07 null: NULL object
16:59:07 sql: select * from `config` where id=1
16:59:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
16:59:07 null: Undefined object
16:59:07 sql: select * from `page` where id=1 order by pos asc
16:59:07 null: Undefined object
16:59:07 sql: select * from `section` where page_id=1 order by `pos` asc
16:59:07 null: Undefined object
16:59:07 null: Undefined object
16:59:07 null: Undefined object
16:59:07 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
16:59:08 null: Undefined object
18:00:05 null: NULL object
18:00:05 sql: select * from `config` where id=1
18:00:05 sql: select * from `page` where id=1 order by pos asc
18:00:05 null: Undefined object
18:00:05 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:00:05 sql: select * from `section` where page_id=1 order by `pos` asc
18:00:05 null: Undefined object
18:00:08 null: NULL object
18:57:15 null: NULL object
18:57:15 sql: select * from `config` where id=1
18:59:04 null: NULL object
18:59:04 sql: select * from `config` where id=1
18:59:04 sql: select * from `page` where id=1 order by pos asc
18:59:04 null: Undefined object
19:29:18 null: NULL object
19:29:18 sql: select * from `config` where id=1
19:29:18 sql: select * from `page` where id=1 order by pos asc
19:29:18 null: Undefined object
19:31:44 null: NULL object
19:31:44 sql: select * from `config` where id=1
19:31:44 sql: select * from `page` where id=1 order by pos asc
19:31:45 null: Undefined object
20:10:56 null: NULL object
20:10:56 sql: select * from `page` where id=1 order by pos asc
20:10:56 sql: select * from `config` where id=1
20:11:43 null: NULL object
20:11:43 sql: select * from `config` where id=1
20:11:43 sql: select * from `page` where id=1 order by pos asc
20:14:05 null: NULL object
20:14:05 sql: select * from `config` where id=1
20:14:05 sql: select * from `page` where id=1 order by pos asc
20:14:05 sql: select * from `section` where page_id=1 order by `pos` asc
20:15:35 null: NULL object
20:15:35 sql: select * from `config` where id=1
20:15:35 sql: select * from `page` where id=1 order by pos asc
20:15:35 sql: select * from `section` where page_id=1 order by `pos` asc
20:15:35 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:18:32 null: NULL object
20:18:32 sql: select * from `config` where id=1
20:19:24 null: NULL object
20:19:24 sql: select * from `config` where id=1
20:20:53 null: NULL object
20:20:53 sql: select * from `config` where id=1
20:21:07 null: NULL object
20:21:07 sql: select * from `config` where id=1
20:21:23 null: NULL object
20:21:23 sql: select * from `config` where id=1
20:22:27 null: NULL object
20:22:27 sql: select * from `config` where id=1
20:22:33 null: NULL object
20:22:33 sql: select * from `user` where username=0
20:22:34 verify_user: [object Object]
20:22:34 Användaren undefined är inte giltig
20:22:35 sql: select * from `page` where id=1 order by pos asc
20:22:35 sql: select * from `section` where page_id=1 order by `pos` asc
20:22:37 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:26:41 null: NULL object
20:26:41 sql: select * from `config` where id=1
20:26:45 null: NULL object
20:26:45 sql: select * from `user` where username=0
20:26:45 verify_user: [object Object]
20:26:45 Användaren undefined är inte giltig
20:26:46 sql: select * from `page` where id=1 order by pos asc
20:26:46 sql: select * from `section` where page_id=1 order by `pos` asc
20:26:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:27:27 null: NULL object
20:27:27 sql: select * from `config` where id=1
20:27:38 null: NULL object
20:27:38 sql: select * from `user` where username=0
20:27:38 sql: select * from `page` where id=1 order by pos asc
20:27:38 verify_user: [object Object]
20:27:38 sql: select * from `section` where page_id=1 order by `pos` asc
20:27:38 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:27:38 Användaren undefined är inte giltig
20:27:43 null: NULL object
20:27:43 sql: select * from `config` where id=1
20:27:43 null: NULL object
20:27:43 sql: select * from `user` where username=0
20:27:43 sql: select * from `page` where id=1 order by pos asc
20:27:43 verify_user: [object Object]
20:27:43 sql: select * from `section` where page_id=1 order by `pos` asc
20:27:43 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:27:43 Användaren undefined är inte giltig
20:27:44 function show_tools(title, tools) {

    let toolbar = document.getElementById('toolbar');

    let fieldset = document.getElementById('added-tools');
    if (is_valid(fieldset)) {
        toolbar.removeChild(fieldset);
    }

    fieldset = document.createElement('fieldset');
    fieldset.id = 'added-tools';
    let legend = document.createElement('legend');
    legend.innerText = title;
    fieldset.appendChild(legend);

    tools.forEach(tool => {
        tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
    });

    toolbar.appendChild(fieldset);
}: NULL object
20:28:09 null: NULL object
20:28:09 sql: select * from `config` where id=1
20:28:09 sql: select * from `user` where username=0
20:28:09 null: NULL object
20:28:09 sql: select * from `page` where id=1 order by pos asc
20:28:09 verify_user: [object Object]
20:28:09 sql: select * from `section` where page_id=1 order by `pos` asc
20:28:09 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:28:09 Användaren undefined är inte giltig
20:28:46 null: NULL object
20:28:46 sql: select * from `config` where id=1
20:28:46 null: NULL object
20:28:46 sql: select * from `user` where username=0
20:28:46 sql: select * from `page` where id=1 order by pos asc
20:28:46 verify_user: [object Object]
20:28:46 sql: select * from `section` where page_id=1 order by `pos` asc
20:28:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:28:46 Användaren undefined är inte giltig
20:29:02 function show_tools(title, tools) {

    let toolbar = document.getElementById('toolbar');

    let fieldset = document.getElementById('added-tools');
    if (is_valid(fieldset)) {
        toolbar.removeChild(fieldset);
    }

    fieldset = document.createElement('fieldset');
    fieldset.id = 'added-tools';
    let legend = document.createElement('legend');
    legend.innerText = title;
    fieldset.appendChild(legend);

    tools.forEach(tool => {
        tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
    });

    toolbar.appendChild(fieldset);
}: NULL object
20:31:53 null: NULL object
20:31:53 sql: select * from `config` where id=1
20:31:53 sql: select * from `user` where username=0
20:31:53 null: NULL object
20:31:53 sql: select * from `page` where id=1 order by pos asc
20:31:53 verify_user: [object Object]
20:31:53 sql: select * from `section` where page_id=1 order by `pos` asc
20:31:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:31:54 Användaren undefined är inte giltig
20:31:58 function show_tools(title, tools) {

    let toolbar = document.getElementById('toolbar');

    let fieldset = document.getElementById('added-tools');
    if (is_valid(fieldset)) {
        toolbar.removeChild(fieldset);
    }

    fieldset = document.createElement('fieldset');
    fieldset.id = 'added-tools';
    let legend = document.createElement('legend');
    legend.innerText = title;
    fieldset.appendChild(legend);

    tools.forEach(tool => {
        tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
    });

    toolbar.appendChild(fieldset);
}: NULL object
20:32:22 null: NULL object
20:32:22 null: NULL object
20:32:22 sql: select `username` from `user`
20:32:22 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:32:24 null: NULL object
20:32:24 sql: select * from `user` where `username`='admin'
20:34:36 null: NULL object
20:34:36 null: NULL object
20:34:36 sql: select * from `config` where id=1
20:34:36 sql: select * from `user` where username=0
20:34:36 sql: select * from `page` where id=1 order by pos asc
20:34:36 sql: select * from `section` where page_id=1 order by `pos` asc
20:34:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:34:36 verify_user: [object Object]
20:34:37 Användaren undefined är inte giltig
20:35:27 null: NULL object
20:35:27 sql: select * from `config` where id=1
20:35:27 sql: select * from `user` where username=0
20:35:27 null: NULL object
20:35:27 sql: select * from `page` where id=1 order by pos asc
20:35:27 verify_user: [object Object]
20:35:27 sql: select * from `section` where page_id=1 order by `pos` asc
20:35:27 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:35:27 Användaren undefined är inte giltig
20:38:45 null: NULL object
20:38:45 sql: select * from `config` where id=1
20:38:45 sql: select * from `user` where username=0
20:38:45 null: NULL object
20:38:45 sql: select * from `page` where id=1 order by pos asc
20:38:46 verify_user: [object Object]
20:38:46 sql: select * from `section` where page_id=1 order by `pos` asc
20:38:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:38:46 Användaren undefined är inte giltig
20:38:51 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:51 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:38:51 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:52 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:38:52 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:38:55 null: NULL object
20:38:55 sql: select * from `config` where id=1
20:38:55 null: NULL object
20:38:55 sql: select * from `user` where username=0
20:38:55 sql: select * from `page` where id=1 order by pos asc
20:38:55 verify_user: [object Object]
20:38:55 sql: select * from `section` where page_id=1 order by `pos` asc
20:38:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:38:55 Användaren undefined är inte giltig
20:39:22 sql: update `section` set `pos`=0,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=1,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=2,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=3,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=4,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=5,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=6,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=7,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=8,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=9,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=10,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:39:22 sql: update `section` set `pos`=11,`height`=NaN where id=NaN
20:39:22 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=NaN where id=NaN] Unknown column 'NaN' in 'where clause'
20:40:44 null: NULL object
20:40:44 sql: select * from `config` where id=1
20:40:44 sql: select * from `user` where username=0
20:40:44 null: NULL object
20:40:44 sql: select * from `page` where id=1 order by pos asc
20:40:44 verify_user: [object Object]
20:40:44 sql: select * from `section` where page_id=1 order by `pos` asc
20:40:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:40:44 Användaren undefined är inte giltig
20:51:36 null: NULL object
20:51:36 sql: select * from `config` where id=1
20:51:36 null: NULL object
20:51:36 sql: select * from `user` where username=0
20:51:36 sql: select * from `page` where id=1 order by pos asc
20:51:36 verify_user: [object Object]
20:51:36 sql: select * from `section` where page_id=1 order by `pos` asc
20:51:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:51:36 Användaren undefined är inte giltig
20:52:05 null: NULL object
20:52:05 sql: select * from `config` where id=1
20:52:05 sql: select * from `user` where username=0
20:52:05 null: NULL object
20:52:05 sql: select * from `page` where id=1 order by pos asc
20:52:05 verify_user: [object Object]
20:52:05 sql: select * from `section` where page_id=1 order by `pos` asc
20:52:05 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:52:05 Användaren undefined är inte giltig
20:55:30 null: NULL object
20:55:30 null: NULL object
20:55:30 sql: select * from `config` where id=1
20:55:30 sql: select * from `user` where username=0
20:55:30 sql: select * from `page` where id=1 order by pos asc
20:55:30 verify_user: [object Object]
20:55:30 sql: select * from `section` where page_id=1 order by `pos` asc
20:55:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:55:30 Användaren undefined är inte giltig
20:58:49 sql: update `section` set `pos`=0,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=1,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=2,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=3,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=4,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=5,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=6,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=7,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=8,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=9,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=10,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:49 sql: update `section` set `pos`=11,`height`=20 where id=NaN
20:58:49 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=0,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=1,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=2,`height`=20 where id=NaN
20:58:50 sql: update `section` set `pos`=3,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=4,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=6,`height`=20 where id=NaN
20:58:50 sql: update `section` set `pos`=8,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=7,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=5,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=9,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=10,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:50 sql: update `section` set `pos`=11,`height`=20 where id=NaN
20:58:50 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
20:58:56 null: NULL object
20:58:56 sql: select * from `config` where id=1
20:58:56 sql: select * from `user` where username=0
20:58:56 null: NULL object
20:58:56 sql: select * from `page` where id=1 order by pos asc
20:58:56 sql: select * from `section` where page_id=1 order by `pos` asc
20:58:56 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:58:56 verify_user: [object Object]
20:58:56 Användaren undefined är inte giltig
20:59:46 null: NULL object
20:59:46 sql: select * from `config` where id=1
20:59:46 null: NULL object
20:59:46 sql: select * from `page` where id=1 order by pos asc
20:59:46 sql: select * from `user` where username=0
20:59:46 sql: select * from `section` where page_id=1 order by `pos` asc
20:59:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:59:46 verify_user: [object Object]
20:59:46 Användaren undefined är inte giltig
21:02:11 null: NULL object
21:02:11 sql: select * from `config` where id=1
21:02:11 null: NULL object
21:02:11 sql: select * from `user` where username=0
21:02:11 sql: select * from `page` where id=1 order by pos asc
21:02:12 sql: select * from `section` where page_id=1 order by `pos` asc
21:02:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:02:12 verify_user: [object Object]
21:02:12 Användaren undefined är inte giltig
21:03:31 null: NULL object
21:03:31 null: NULL object
21:03:31 sql: select * from `config` where id=1
21:03:31 sql: select * from `user` where username=0
21:03:31 sql: select * from `page` where id=1 order by pos asc
21:03:31 verify_user: [object Object]
21:03:31 sql: select * from `section` where page_id=1 order by `pos` asc
21:03:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:03:31 Användaren undefined är inte giltig
21:04:48 null: NULL object
21:04:48 sql: select * from `config` where id=1
21:04:48 null: NULL object
21:04:48 sql: select * from `user` where username=0
21:04:48 sql: select * from `page` where id=1 order by pos asc
21:04:48 verify_user: [object Object]
21:04:48 sql: select * from `section` where page_id=1 order by `pos` asc
21:04:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:04:48 Användaren undefined är inte giltig
21:05:23 null: NULL object
21:05:23 sql: select * from `config` where id=1
21:05:23 sql: select * from `user` where username=0
21:05:23 null: NULL object
21:05:23 sql: select * from `page` where id=1 order by pos asc
21:05:23 verify_user: [object Object]
21:05:23 sql: select * from `section` where page_id=1 order by `pos` asc
21:05:23 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:05:23 Användaren undefined är inte giltig
21:06:57 null: NULL object
21:06:57 sql: select * from `config` where id=1
21:10:09 null: NULL object
21:10:09 sql: select * from `config` where id=1
21:10:30 null: NULL object
21:10:30 sql: select * from `user` where username=0
21:10:30 sql: select * from `page` where id=1 order by pos asc
21:10:30 verify_user: [object Object]
21:10:30 sql: select * from `section` where page_id=1 order by `pos` asc
21:10:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:10:30 Användaren undefined är inte giltig
21:11:54 null: NULL object
21:11:54 sql: select * from `config` where id=1
21:11:58 null: NULL object
21:11:58 sql: select * from `user` where username=0
21:11:58 sql: select * from `page` where id=1 order by pos asc
21:11:58 verify_user: [object Object]
21:11:58 sql: select * from `section` where page_id=1 order by `pos` asc
21:11:58 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:11:58 Användaren undefined är inte giltig
21:13:27 null: NULL object
21:13:27 sql: select * from `config` where id=1
21:13:27 null: NULL object
21:13:27 sql: select * from `user` where username=0
21:13:27 sql: select * from `page` where id=1 order by pos asc
21:13:27 verify_user: [object Object]
21:13:27 sql: select * from `section` where page_id=1 order by `pos` asc
21:13:27 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:13:27 Användaren undefined är inte giltig
21:13:54 null: NULL object
21:13:54 sql: select * from `config` where id=1
21:13:54 sql: select * from `user` where username=0
21:13:54 null: NULL object
21:13:54 sql: select * from `page` where id=1 order by pos asc
21:13:55 verify_user: [object Object]
21:13:55 sql: select * from `section` where page_id=1 order by `pos` asc
21:13:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:13:55 Användaren undefined är inte giltig
21:14:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:14:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:14:11 verify_user: [object Object]
21:14:11 null: NULL object
21:14:11 sql: select * from `user` where username='admin'
21:14:11 verify_user: [object Object]
21:14:11 Användaren undefined är inte giltig
21:14:16 null: NULL object
21:14:16 sql: select * from `config` where id=1
21:14:16 sql: select * from `user` where username='admin'
21:14:16 null: NULL object
21:14:16 verify_user: [object Object]
21:14:16 Användaren undefined är inte giltig
21:14:16 sql: select * from `page` where id=1 order by pos asc
21:14:16 sql: select * from `section` where page_id=1 order by `pos` asc
21:14:16 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:14:52 null: NULL object
21:14:52 sql: select * from `config` where id=1
21:15:03 null: NULL object
21:15:03 sql: select * from `user` where username='admin'
21:16:55 verify_user: [object Object]
21:16:55 Användaren undefined är inte giltig
21:16:55 sql: select * from `page` where id=1 order by pos asc
21:16:55 sql: select * from `section` where page_id=1 order by `pos` asc
21:16:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:16:58 null: NULL object
21:16:58 sql: select * from `config` where id=1
21:17:02 null: NULL object
21:17:02 sql: select * from `user` where username='admin'
21:17:09 verify_user: [object Object]
21:17:15 Användaren admin är inte giltig
21:17:15 sql: select * from `page` where id=1 order by pos asc
21:17:15 sql: select * from `section` where page_id=1 order by `pos` asc
21:17:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:17:37 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:37 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:45 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:45 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
21:17:56 verify_user: [object Object]
21:18:28 null: NULL object
21:18:28 sql: select * from `user` where username='admin'
21:18:41 verify_user: [object Object]
21:18:41 Användaren admin är inte giltig
21:19:47 null: NULL object
21:19:47 sql: select * from `config` where id=1
21:19:50 null: NULL object
21:19:50 sql: select * from `user` where username='admin'
21:21:30 null: NULL object
21:21:30 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:21:30 sql: select * from `config` where id=1
21:21:32 null: NULL object
21:21:32 sql: select * from `user` where username='admin'
21:21:34 sql: select * from `page` where id=1 order by pos asc
21:21:34 sql: select * from `section` where page_id=1 order by `pos` asc
21:21:36 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
21:21:45 sql: update `section` set `pos`=0,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=0,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=1,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=1,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=2,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=2,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=3,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=3,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=4,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=4,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=5,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=5,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=6,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=6,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=7,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=7,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=8,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=8,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=9,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=9,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=10,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=10,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:45 sql: update `section` set `pos`=11,`height`=20 where id=NaN
21:21:45 PHP: Undantagsfel i databasen för  [update `section` set `pos`=11,`height`=20 where id=NaN] Unknown column 'NaN' in 'where clause'
21:21:53 null: NULL object
21:21:53 sql: select * from `config` where id=1
21:21:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
21:21:55 null: NULL object
21:21:55 sql: select * from `user` where username='admin'
21:21:56 sql: select * from `page` where id=1 order by pos asc
21:21:56 sql: select * from `section` where page_id=1 order by `pos` asc
21:22:02 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:09:36 null: NULL object
08:09:36 sql: select * from `config` where id=1
08:09:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:09:36 null: NULL object
08:09:36 sql: select * from `user` where username='admin'
08:09:36 sql: select * from `page` where id=1 order by pos asc
08:09:37 sql: select * from `section` where page_id=1 order by `pos` asc
08:09:39 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:11:39 null: NULL object
08:11:39 sql: select * from `config` where id=1
08:11:39 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:11:39 null: NULL object
08:11:39 sql: select * from `user` where username='admin'
08:11:39 sql: select * from `page` where id=1 order by pos asc
08:11:39 sql: select * from `section` where page_id=1 order by `pos` asc
08:11:57 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:14:13 null: NULL object
08:14:13 sql: select * from `config` where id=1
08:14:13 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:14:13 null: NULL object
08:14:13 sql: select * from `user` where username='admin'
08:14:14 sql: select * from `page` where id=1 order by pos asc
08:14:14 sql: select * from `section` where page_id=1 order by `pos` asc
08:14:15 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:16:46 null: NULL object
08:16:46 sql: select * from `config` where id=1
08:16:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:16:46 null: NULL object
08:16:46 sql: select * from `user` where username='admin'
08:20:05 null: NULL object
08:20:05 sql: select * from `config` where id=1
08:20:06 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:20:06 sql: select * from `user` where username='admin'
08:20:06 null: NULL object
08:20:06 sql: select * from `page` where id=1 order by pos asc
08:20:06 sql: select * from `section` where page_id=1 order by `pos` asc
08:20:44 null: NULL object
08:20:44 sql: select * from `config` where id=1
08:20:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:20:44 null: NULL object
08:20:44 sql: select * from `user` where username='admin'
08:20:44 sql: select * from `page` where id=1 order by pos asc
08:20:44 sql: select * from `section` where page_id=1 order by `pos` asc
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:45 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:20:48 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:22:20 sql: update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=s-1
08:31:47 PHP: Undantagsfel i databasen för  [update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=s-1] Unknown column 's' in 'where clause'
08:31:50 sql: update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=s-1
08:32:02 PHP: Undantagsfel i databasen för  [update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=s-1] Unknown column 's' in 'where clause'
08:32:03 null: NULL object
08:32:03 sql: select * from `config` where id=1
08:32:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:32:03 null: NULL object
08:32:03 sql: select * from `user` where username='admin'
08:32:03 sql: select * from `page` where id=1 order by pos asc
08:32:03 sql: select * from `section` where page_id=1 order by `pos` asc
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:05 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            container.children[i].classList.remove('section-edit');
            if( is_valid(Global.selected) && Global.selected.id === section.id ) {
                let func = window[`leaving_${section.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    func(section);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            func(section);
        }
    }
}: Undefined object
08:32:08 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:36:57 null: NULL object
08:36:57 sql: select * from `config` where id=1
08:36:57 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:36:57 null: NULL object
08:36:57 sql: select * from `user` where username='admin'
08:36:57 sql: select * from `page` where id=1 order by pos asc
08:36:57 sql: select * from `section` where page_id=1 order by `pos` asc
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:37:02 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:38:45 null: NULL object
08:38:45 sql: select * from `config` where id=1
08:38:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:38:46 null: NULL object
08:38:46 sql: select * from `user` where username='admin'
08:38:46 sql: select * from `page` where id=1 order by pos asc
08:38:46 sql: select * from `section` where page_id=1 order by `pos` asc
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:38:47 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:40:35 null: NULL object
08:40:36 sql: select * from `config` where id=1
08:40:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:40:36 null: NULL object
08:40:36 sql: select * from `user` where username='admin'
08:40:36 sql: select * from `page` where id=1 order by pos asc
08:40:36 sql: select * from `section` where page_id=1 order by `pos` asc
08:40:50 null: NULL object
08:40:50 sql: select * from `config` where id=1
08:40:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:40:50 null: NULL object
08:40:50 sql: select * from `user` where username='admin'
08:40:51 sql: select * from `page` where id=1 order by pos asc
08:40:51 sql: select * from `section` where page_id=1 order by `pos` asc
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:40:51 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:40:53 sql: update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:41:54 PHP: Undantagsfel i databasen för  [update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1] Unknown column 'NaN' in 'field list'
08:41:55 null: NULL object
08:41:55 sql: select * from `config` where id=1
08:41:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:41:55 null: NULL object
08:41:55 sql: select * from `user` where username='admin'
08:41:55 sql: select * from `page` where id=1 order by pos asc
08:41:55 sql: select * from `section` where page_id=1 order by `pos` asc
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:41:57 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:44:05 sql: update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:44:07 PHP: Undantagsfel i databasen för  [update `section` set `height`=NaN,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1] Unknown column 'NaN' in 'field list'
08:45:47 null: NULL object
08:45:47 sql: select * from `config` where id=1
08:45:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:45:47 null: NULL object
08:45:47 sql: select * from `user` where username='admin'
08:45:47 sql: select * from `page` where id=1 order by pos asc
08:45:47 sql: select * from `section` where page_id=1 order by `pos` asc
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:45:49 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:45:54 sql: update `section` set `height`=8,`content`='{"align":"left","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:45:58 sql: update `section` set `height`=8,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:46:04 sql: update `section` set `height`=8,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:46:07 null: NULL object
08:46:07 sql: select * from `config` where id=1
08:46:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:46:07 null: NULL object
08:46:07 sql: select * from `user` where username='admin'
08:46:07 sql: select * from `page` where id=1 order by pos asc
08:46:07 sql: select * from `section` where page_id=1 order by `pos` asc
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:46:09 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:46:20 sql: update `section` set `height`=4,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:46:22 sql: update `section` set `height`=4,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:46:22 sql: update `section` set `height`=4,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:46:23 sql: update `section` set `height`=4,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:46:24 sql: update `section` set `height`=4,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:46:26 sql: update `section` set `height`=4,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:48:50 null: NULL object
08:48:50 sql: select * from `config` where id=1
08:48:51 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:48:51 null: NULL object
08:48:51 sql: select * from `user` where username='admin'
08:48:51 sql: select * from `page` where id=1 order by pos asc
08:48:51 sql: select * from `section` where page_id=1 order by `pos` asc
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:48:53 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:49:02 sql: update `section` set `height`=2,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:49:12 sql: update `section` set `height`=2,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:49:18 sql: update `section` set `height`=2,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:50:22 sql: update `section` set `height`=2,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:50:23 sql: update `section` set `height`=2,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:50:26 sql: update `section` set `height`=2,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:50:27 sql: update `section` set `height`=2,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:50:28 sql: update `section` set `height`=2,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:50:29 sql: update `section` set `height`=9,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=6
08:50:30 sql: update `section` set `height`=9,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=6
08:50:36 null: NULL object
08:50:36 sql: select * from `config` where id=1
08:50:36 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:50:36 null: NULL object
08:50:36 sql: select * from `user` where username='admin'
08:50:36 sql: select * from `page` where id=1 order by pos asc
08:50:36 sql: select * from `section` where page_id=1 order by `pos` asc
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:50:37 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:51:47 null: NULL object
08:51:47 sql: select * from `config` where id=1
08:51:47 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:51:47 null: NULL object
08:51:47 sql: select * from `user` where username='admin'
08:51:47 sql: select * from `page` where id=1 order by pos asc
08:51:47 sql: select * from `section` where page_id=1 order by `pos` asc
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:51:49 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:51:55 sql: update `section` set `height`=1,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=5
08:51:57 sql: update `section` set `height`=1,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20...dfsdfdf"}' where id=5
08:52:00 sql: update `section` set `pos`=0,`height`=3 where id=1
08:52:00 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:00 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:00 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:00 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:00 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:00 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:00 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:00 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:00 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:00 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:00 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:01 sql: update `section` set `pos`=0,`height`=4 where id=1
08:52:01 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:01 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:01 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:01 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:01 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:01 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:01 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:01 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:01 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:01 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:01 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:01 sql: update `section` set `pos`=0,`height`=5 where id=1
08:52:01 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:01 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:01 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:01 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:01 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:01 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:01 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:01 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:01 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:01 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:01 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:01 sql: update `section` set `pos`=0,`height`=6 where id=1
08:52:01 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:01 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:01 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:01 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:01 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:01 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:01 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:01 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:01 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:01 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:01 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:02 sql: update `section` set `pos`=0,`height`=7 where id=1
08:52:02 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:02 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:02 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:02 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:02 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:02 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:02 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:02 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:02 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:02 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:02 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:02 sql: update `section` set `pos`=0,`height`=8 where id=1
08:52:02 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:02 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:02 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:02 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:02 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:02 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:02 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:02 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:02 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:02 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:02 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:02 sql: update `section` set `pos`=0,`height`=9 where id=1
08:52:02 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:02 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:02 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:02 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:02 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:02 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:02 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:02 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:02 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:02 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:02 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:02 sql: update `section` set `pos`=0,`height`=11 where id=1
08:52:02 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:02 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:02 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:02 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:02 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:02 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:02 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:02 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:02 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:02 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:02 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:02 sql: update `section` set `pos`=0,`height`=12 where id=1
08:52:03 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:03 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:03 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:03 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:03 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:03 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:03 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:03 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:03 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:03 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:03 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:03 sql: update `section` set `pos`=0,`height`=13 where id=1
08:52:03 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:03 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:03 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:03 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:03 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:03 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:03 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:03 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:03 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:03 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:03 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:03 sql: update `section` set `pos`=0,`height`=14 where id=1
08:52:03 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:03 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:03 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:03 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:03 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:03 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:03 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:03 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:03 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:03 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:03 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:03 sql: update `section` set `pos`=0,`height`=15 where id=1
08:52:03 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:03 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:03 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:03 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:03 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:03 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:03 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:03 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:03 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:03 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:03 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:03 sql: update `section` set `pos`=0,`height`=16 where id=1
08:52:03 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:03 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:03 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:03 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:03 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:03 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:03 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:03 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:03 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:03 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:03 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:04 sql: update `section` set `pos`=0,`height`=17 where id=1
08:52:04 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:04 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:04 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:04 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:04 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:04 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:04 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:04 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:04 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:04 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:04 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:04 sql: update `section` set `pos`=0,`height`=18 where id=1
08:52:04 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:04 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:04 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:04 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:04 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:04 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:04 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:04 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:04 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:04 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:04 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:04 sql: update `section` set `pos`=0,`height`=20 where id=1
08:52:04 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:04 sql: update `section` set `pos`=2,`height`=8 where id=6
08:52:04 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:04 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:04 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:04 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:04 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:04 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:04 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:04 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:04 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:05 sql: update `section` set `height`=9,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:52:07 null: NULL object
08:52:07 sql: select * from `config` where id=1
08:52:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:52:07 null: NULL object
08:52:07 sql: select * from `user` where username='admin'
08:52:07 sql: select * from `page` where id=1 order by pos asc
08:52:08 sql: select * from `section` where page_id=1 order by `pos` asc
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:09 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:52:13 sql: update `section` set `pos`=0,`height`=10 where id=1
08:52:13 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:13 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:13 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:13 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:13 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:13 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:13 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:13 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:13 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:13 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:13 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:13 sql: update `section` set `pos`=0,`height`=11 where id=1
08:52:13 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:13 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:13 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:13 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:13 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:13 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:13 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:13 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:13 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:13 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:13 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:14 sql: update `section` set `pos`=0,`height`=12 where id=1
08:52:14 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:14 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:14 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:14 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:14 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:14 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:14 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:14 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:14 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:14 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:14 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:14 sql: update `section` set `pos`=0,`height`=13 where id=1
08:52:14 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:14 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:14 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:14 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:14 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:14 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:14 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:14 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:14 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:14 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:14 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:14 sql: update `section` set `pos`=0,`height`=14 where id=1
08:52:14 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:14 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:14 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:14 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:14 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:14 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:14 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:14 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:14 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:14 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:14 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:14 sql: update `section` set `pos`=0,`height`=15 where id=1
08:52:14 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:14 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:14 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:14 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:14 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:14 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:14 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:14 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:14 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:14 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:14 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:14 sql: update `section` set `pos`=0,`height`=16 where id=1
08:52:14 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:14 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:14 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:14 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:14 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:15 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:15 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:15 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:15 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:15 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:15 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:15 sql: update `section` set `pos`=0,`height`=17 where id=1
08:52:15 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:15 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:15 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:15 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:15 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:15 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:15 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:15 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:15 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:15 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:15 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:15 sql: update `section` set `pos`=0,`height`=19 where id=1
08:52:15 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:15 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:15 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:15 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:15 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:15 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:15 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:15 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:15 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:15 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:15 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:15 sql: update `section` set `pos`=0,`height`=20 where id=1
08:52:15 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:15 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:15 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:15 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:15 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:15 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:15 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:15 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:15 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:15 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:15 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:15 sql: update `section` set `pos`=0,`height`=21 where id=1
08:52:15 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:15 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:15 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:15 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:15 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:15 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:15 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:16 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:16 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:16 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:16 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:16 sql: update `section` set `pos`=0,`height`=22 where id=1
08:52:16 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:16 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:16 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:16 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:16 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:16 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:16 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:16 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:16 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:16 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:16 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:16 sql: update `section` set `pos`=0,`height`=23 where id=1
08:52:16 sql: update `section` set `pos`=1,`height`=2 where id=5
08:52:16 sql: update `section` set `pos`=2,`height`=7 where id=6
08:52:16 sql: update `section` set `pos`=3,`height`=20 where id=7
08:52:16 sql: update `section` set `pos`=4,`height`=20 where id=8
08:52:16 sql: update `section` set `pos`=5,`height`=20 where id=9
08:52:16 sql: update `section` set `pos`=6,`height`=20 where id=10
08:52:16 sql: update `section` set `pos`=7,`height`=20 where id=11
08:52:16 sql: update `section` set `pos`=8,`height`=20 where id=12
08:52:16 sql: update `section` set `pos`=9,`height`=20 where id=13
08:52:16 sql: update `section` set `pos`=10,`height`=20 where id=3
08:52:16 sql: update `section` set `pos`=11,`height`=20 where id=4
08:52:18 null: NULL object
08:52:18 sql: select * from `config` where id=1
08:52:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:52:19 null: NULL object
08:52:19 sql: select * from `user` where username='admin'
08:52:19 sql: select * from `page` where id=1 order by pos asc
08:52:19 sql: select * from `section` where page_id=1 order by `pos` asc
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:20 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:52:23 sql: update `section` set `height`=10,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:52:24 sql: update `section` set `height`=10,`content`='{"align":"center","text":"V%C3%A4lommen%20till%20FrostByte%3Cbr%3E"}' where id=1
08:52:33 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ES%C3%B6ndag%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:33 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ES%C3%B6ndag%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:42 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:44 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:53 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:55 sql: update `section` set `height`=10,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:52:57 null: NULL object
08:52:57 sql: select * from `config` where id=1
08:52:57 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:52:57 null: NULL object
08:52:57 sql: select * from `user` where username='admin'
08:52:57 sql: select * from `page` where id=1 order by pos asc
08:52:57 sql: select * from `section` where page_id=1 order by `pos` asc
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:52:59 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:59:23 null: NULL object
08:59:23 sql: select * from `config` where id=1
08:59:23 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:59:23 null: NULL object
08:59:23 sql: select * from `user` where username='admin'
08:59:23 sql: select * from `page` where id=1 order by pos asc
08:59:23 sql: select * from `section` where page_id=1 order by `pos` asc
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:25 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:59:28 sql: update `section` set `pos`=0,`height`=11 where id=1
08:59:28 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:28 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:28 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:28 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:28 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:28 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:28 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:28 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:28 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:28 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:28 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:28 sql: update `section` set `pos`=0,`height`=12 where id=1
08:59:28 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:28 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:29 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:29 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:29 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:29 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:29 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:29 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:29 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:29 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:29 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:29 sql: update `section` set `pos`=0,`height`=13 where id=1
08:59:29 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:29 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:29 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:29 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:29 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:29 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:29 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:29 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:29 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:29 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:29 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:29 sql: update `section` set `pos`=0,`height`=14 where id=1
08:59:29 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:29 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:29 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:29 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:29 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:29 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:29 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:29 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:29 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:29 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:29 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:29 sql: update `section` set `pos`=0,`height`=15 where id=1
08:59:29 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:29 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:29 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:29 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:29 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:29 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:29 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:29 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:29 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:29 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:29 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:29 sql: update `section` set `pos`=0,`height`=16 where id=1
08:59:29 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:29 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:29 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:29 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:29 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:29 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:29 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:29 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:29 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:29 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:29 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:29 sql: update `section` set `pos`=0,`height`=17 where id=1
08:59:29 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:30 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:30 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:30 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:30 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:30 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:30 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:30 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:30 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:30 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:30 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:30 sql: update `section` set `pos`=0,`height`=18 where id=1
08:59:30 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:30 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:30 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:30 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:30 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:30 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:30 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:30 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:30 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:30 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:30 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:30 sql: update `section` set `pos`=0,`height`=20 where id=1
08:59:30 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:30 sql: update `section` set `pos`=2,`height`=6 where id=6
08:59:30 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:30 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:30 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:30 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:30 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:30 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:30 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:30 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:30 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:32 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:59:33 null: NULL object
08:59:33 sql: select * from `config` where id=1
08:59:33 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:59:33 null: NULL object
08:59:33 sql: select * from `user` where username='admin'
08:59:33 sql: select * from `page` where id=1 order by pos asc
08:59:33 sql: select * from `section` where page_id=1 order by `pos` asc
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:35 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:59:38 sql: update `section` set `height`=22,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:59:39 sql: update `section` set `pos`=0,`height`=22 where id=1
08:59:39 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:39 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:39 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:39 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:39 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:39 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:39 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:39 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:39 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:39 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:39 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:39 sql: update `section` set `pos`=0,`height`=23 where id=1
08:59:39 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:39 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:39 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:39 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:39 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:39 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:39 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:39 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:39 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:39 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:39 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:40 sql: update `section` set `pos`=0,`height`=24 where id=1
08:59:40 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:40 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:40 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:40 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:40 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:40 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:40 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:40 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:40 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:40 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:40 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:40 sql: update `section` set `pos`=0,`height`=25 where id=1
08:59:40 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:40 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:40 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:40 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:40 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:40 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:40 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:40 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:40 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:40 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:40 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:40 sql: update `section` set `pos`=0,`height`=26 where id=1
08:59:40 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:40 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:40 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:40 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:40 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:40 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:40 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:40 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:40 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:40 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:40 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:40 sql: update `section` set `pos`=0,`height`=27 where id=1
08:59:40 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:40 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:40 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:40 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:40 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:40 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:40 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:40 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:40 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:40 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:40 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:40 sql: update `section` set `pos`=0,`height`=28 where id=1
08:59:40 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:40 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:40 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:40 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:40 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:40 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:40 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:40 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:40 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:40 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:40 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:41 sql: update `section` set `pos`=0,`height`=30 where id=1
08:59:41 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:41 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:41 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:41 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:41 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:41 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:41 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:41 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:41 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:41 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:41 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:41 sql: update `section` set `pos`=0,`height`=31 where id=1
08:59:41 sql: update `section` set `pos`=1,`height`=2 where id=5
08:59:41 sql: update `section` set `pos`=2,`height`=5 where id=6
08:59:41 sql: update `section` set `pos`=3,`height`=20 where id=7
08:59:41 sql: update `section` set `pos`=4,`height`=20 where id=8
08:59:41 sql: update `section` set `pos`=5,`height`=20 where id=9
08:59:41 sql: update `section` set `pos`=6,`height`=20 where id=10
08:59:41 sql: update `section` set `pos`=7,`height`=20 where id=11
08:59:41 sql: update `section` set `pos`=8,`height`=20 where id=12
08:59:41 sql: update `section` set `pos`=9,`height`=20 where id=13
08:59:41 sql: update `section` set `pos`=10,`height`=20 where id=3
08:59:41 sql: update `section` set `pos`=11,`height`=20 where id=4
08:59:42 sql: update `section` set `height`=32,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
08:59:45 null: NULL object
08:59:45 sql: select * from `config` where id=1
08:59:45 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
08:59:45 null: NULL object
08:59:45 sql: select * from `user` where username='admin'
08:59:45 sql: select * from `page` where id=1 order by pos asc
08:59:45 sql: select * from `section` where page_id=1 order by `pos` asc
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
08:59:46 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
08:59:54 sql: update `section` set `height`=33,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:00:01 sql: update `section` set `pos`=0,`height`=2 where id=5
09:00:01 sql: update `section` set `pos`=1,`height`=32 where id=1
09:00:01 sql: update `section` set `pos`=2,`height`=5 where id=6
09:00:01 sql: update `section` set `pos`=3,`height`=20 where id=7
09:00:01 sql: update `section` set `pos`=4,`height`=20 where id=8
09:00:01 sql: update `section` set `pos`=5,`height`=20 where id=9
09:00:01 sql: update `section` set `pos`=6,`height`=20 where id=10
09:00:01 sql: update `section` set `pos`=7,`height`=20 where id=11
09:00:01 sql: update `section` set `pos`=8,`height`=20 where id=12
09:00:01 sql: update `section` set `pos`=9,`height`=20 where id=13
09:00:01 sql: update `section` set `pos`=10,`height`=20 where id=3
09:00:01 sql: update `section` set `pos`=11,`height`=20 where id=4
09:00:02 sql: update `section` set `pos`=0,`height`=2 where id=5
09:00:02 sql: update `section` set `pos`=1,`height`=5 where id=6
09:00:02 sql: update `section` set `pos`=2,`height`=32 where id=1
09:00:02 sql: update `section` set `pos`=3,`height`=20 where id=7
09:00:02 sql: update `section` set `pos`=4,`height`=20 where id=8
09:00:02 sql: update `section` set `pos`=5,`height`=20 where id=9
09:00:02 sql: update `section` set `pos`=6,`height`=20 where id=10
09:00:02 sql: update `section` set `pos`=7,`height`=20 where id=11
09:00:02 sql: update `section` set `pos`=8,`height`=20 where id=12
09:00:02 sql: update `section` set `pos`=9,`height`=20 where id=13
09:00:02 sql: update `section` set `pos`=10,`height`=20 where id=3
09:00:02 sql: update `section` set `pos`=11,`height`=20 where id=4
09:00:03 sql: update `section` set `pos`=0,`height`=2 where id=5
09:00:03 sql: update `section` set `pos`=1,`height`=5 where id=6
09:00:03 sql: update `section` set `pos`=2,`height`=20 where id=7
09:00:03 sql: update `section` set `pos`=3,`height`=32 where id=1
09:00:03 sql: update `section` set `pos`=4,`height`=20 where id=8
09:00:03 sql: update `section` set `pos`=5,`height`=20 where id=9
09:00:03 sql: update `section` set `pos`=6,`height`=20 where id=10
09:00:03 sql: update `section` set `pos`=7,`height`=20 where id=11
09:00:03 sql: update `section` set `pos`=8,`height`=20 where id=12
09:00:03 sql: update `section` set `pos`=9,`height`=20 where id=13
09:00:03 sql: update `section` set `pos`=10,`height`=20 where id=3
09:00:03 sql: update `section` set `pos`=11,`height`=20 where id=4
09:00:03 sql: update `section` set `pos`=0,`height`=2 where id=5
09:00:03 sql: update `section` set `pos`=1,`height`=5 where id=6
09:00:03 sql: update `section` set `pos`=2,`height`=20 where id=7
09:00:03 sql: update `section` set `pos`=3,`height`=20 where id=8
09:00:03 sql: update `section` set `pos`=4,`height`=32 where id=1
09:00:03 sql: update `section` set `pos`=5,`height`=20 where id=9
09:00:03 sql: update `section` set `pos`=6,`height`=20 where id=10
09:00:03 sql: update `section` set `pos`=7,`height`=20 where id=11
09:00:03 sql: update `section` set `pos`=8,`height`=20 where id=12
09:00:03 sql: update `section` set `pos`=9,`height`=20 where id=13
09:00:03 sql: update `section` set `pos`=11,`height`=20 where id=4
09:00:03 sql: update `section` set `pos`=10,`height`=20 where id=3
09:00:04 sql: update `section` set `height`=33,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:00:06 null: NULL object
09:00:06 sql: select * from `config` where id=1
09:00:06 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:00:06 null: NULL object
09:00:06 sql: select * from `user` where username='admin'
09:00:06 sql: select * from `page` where id=1 order by pos asc
09:00:06 sql: select * from `section` where page_id=1 order by `pos` asc
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:00:08 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:00:11 sql: update `section` set `height`=21,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=8
09:04:16 null: NULL object
09:04:16 sql: select * from `config` where id=1
09:04:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:04:17 null: NULL object
09:04:17 sql: select * from `user` where username='admin'
09:04:17 sql: select * from `page` where id=1 order by pos asc
09:04:17 sql: select * from `section` where page_id=1 order by `pos` asc
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:04:19 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:04:32 sql: delete from `section` where id=7
09:04:36 sql: update `section` set `pos`=0,`height`=2 where id=5
09:04:36 sql: update `section` set `pos`=3,`height`=33 where id=1
09:04:37 sql: update `section` set `pos`=1,`height`=5 where id=6
09:04:37 sql: update `section` set `pos`=4,`height`=20 where id=9
09:04:37 sql: update `section` set `pos`=2,`height`=21 where id=8
09:04:37 sql: update `section` set `pos`=8,`height`=20 where id=13
09:04:37 sql: update `section` set `pos`=7,`height`=20 where id=12
09:04:37 sql: update `section` set `pos`=5,`height`=20 where id=10
09:04:37 sql: update `section` set `pos`=6,`height`=20 where id=11
09:04:37 sql: update `section` set `pos`=9,`height`=20 where id=3
09:04:37 sql: update `section` set `pos`=10,`height`=20 where id=4
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:39 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:48 sql: delete from `section` where id=5
09:04:48 sql: update `section` set `pos`=0,`height`=5 where id=6
09:04:48 sql: update `section` set `pos`=1,`height`=21 where id=8
09:04:48 sql: update `section` set `pos`=2,`height`=33 where id=1
09:04:48 sql: update `section` set `pos`=3,`height`=20 where id=9
09:04:48 sql: update `section` set `pos`=4,`height`=20 where id=10
09:04:48 sql: update `section` set `pos`=5,`height`=20 where id=11
09:04:48 sql: update `section` set `pos`=6,`height`=20 where id=12
09:04:48 sql: update `section` set `pos`=7,`height`=20 where id=13
09:04:48 sql: update `section` set `pos`=8,`height`=20 where id=3
09:04:48 sql: update `section` set `pos`=9,`height`=20 where id=4
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:51 sql: delete from `section` where id=6
09:04:51 sql: update `section` set `pos`=0,`height`=21 where id=8
09:04:51 sql: update `section` set `pos`=1,`height`=33 where id=1
09:04:51 sql: update `section` set `pos`=2,`height`=20 where id=9
09:04:51 sql: update `section` set `pos`=3,`height`=20 where id=10
09:04:51 sql: update `section` set `pos`=4,`height`=20 where id=11
09:04:51 sql: update `section` set `pos`=5,`height`=20 where id=12
09:04:51 sql: update `section` set `pos`=6,`height`=20 where id=13
09:04:51 sql: update `section` set `pos`=7,`height`=20 where id=3
09:04:51 sql: update `section` set `pos`=8,`height`=20 where id=4
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:55 sql: delete from `section` where id=8
09:04:55 sql: update `section` set `pos`=0,`height`=33 where id=1
09:04:55 sql: update `section` set `pos`=1,`height`=20 where id=9
09:04:55 sql: update `section` set `pos`=2,`height`=20 where id=10
09:04:55 sql: update `section` set `pos`=3,`height`=20 where id=11
09:04:55 sql: update `section` set `pos`=4,`height`=20 where id=12
09:04:55 sql: update `section` set `pos`=5,`height`=20 where id=13
09:04:55 sql: update `section` set `pos`=6,`height`=20 where id=3
09:04:55 sql: update `section` set `pos`=7,`height`=20 where id=4
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:04:58 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:02 sql: delete from `section` where id=11
09:05:02 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:02 sql: update `section` set `pos`=1,`height`=20 where id=9
09:05:02 sql: update `section` set `pos`=2,`height`=20 where id=10
09:05:02 sql: update `section` set `pos`=3,`height`=20 where id=12
09:05:02 sql: update `section` set `pos`=4,`height`=20 where id=13
09:05:02 sql: update `section` set `pos`=5,`height`=20 where id=3
09:05:02 sql: update `section` set `pos`=6,`height`=20 where id=4
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:04 sql: delete from `section` where id=10
09:05:04 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:04 sql: update `section` set `pos`=1,`height`=20 where id=9
09:05:04 sql: update `section` set `pos`=2,`height`=20 where id=12
09:05:04 sql: update `section` set `pos`=3,`height`=20 where id=13
09:05:04 sql: update `section` set `pos`=4,`height`=20 where id=3
09:05:04 sql: update `section` set `pos`=5,`height`=20 where id=4
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:06 sql: delete from `section` where id=9
09:05:06 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:06 sql: update `section` set `pos`=1,`height`=20 where id=12
09:05:06 sql: update `section` set `pos`=2,`height`=20 where id=13
09:05:06 sql: update `section` set `pos`=3,`height`=20 where id=3
09:05:06 sql: update `section` set `pos`=4,`height`=20 where id=4
09:05:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:08 sql: delete from `section` where id=12
09:05:08 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:08 sql: update `section` set `pos`=1,`height`=20 where id=13
09:05:08 sql: update `section` set `pos`=2,`height`=20 where id=3
09:05:08 sql: update `section` set `pos`=3,`height`=20 where id=4
09:05:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:15 sql: delete from `section` where id=4
09:05:15 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:15 sql: update `section` set `pos`=1,`height`=20 where id=13
09:05:15 sql: update `section` set `pos`=2,`height`=20 where id=3
09:05:16 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:16 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:16 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:17 sql: delete from `section` where id=3
09:05:17 sql: update `section` set `pos`=0,`height`=33 where id=1
09:05:17 sql: update `section` set `pos`=1,`height`=20 where id=13
09:05:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:05:19 sql: delete from `section` where id=13
09:05:19 sql: update `section` set `pos`=0,`height`=33 where id=1
09:06:24 null: NULL object
09:06:24 sql: select * from `config` where id=1
09:06:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:06:24 null: NULL object
09:06:24 sql: select * from `user` where username='admin'
09:06:24 sql: select * from `page` where id=NaN order by pos asc
09:07:20 PHP: Undantagsfel i databasen för  [select * from `page` where id=NaN order by pos asc] Unknown column 'NaN' in 'where clause'
09:07:21 null: NULL object
09:07:21 sql: select * from `config` where id=1
09:07:21 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:07:21 null: NULL object
09:07:21 sql: select * from `user` where username='admin'
09:07:21 sql: select * from `page` where id=1 order by pos asc
09:07:21 sql: select * from `section` where page_id=1 order by `pos` asc
09:07:23 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:07:23 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:08:05 sql: update `section` set `height`=34,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:08:09 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:11 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:50 null: NULL object
09:08:50 sql: select * from `config` where id=1
09:08:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:08:50 null: NULL object
09:08:50 sql: select * from `user` where username='admin'
09:08:50 sql: select * from `page` where id=1 order by pos asc
09:08:50 sql: select * from `section` where page_id=1 order by `pos` asc
09:08:52 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:08:52 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:08:54 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:08:58 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,1,'{"align":"right","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
09:09:00 sql: update `section` set `height`=35,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:09:00 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:09:21 null: NULL object
09:09:21 sql: select * from `config` where id=1
09:09:21 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:09:21 null: NULL object
09:09:21 sql: select * from `user` where username='admin'
09:09:21 sql: select * from `page` where id=1 order by pos asc
09:09:21 sql: select * from `section` where page_id=1 order by `pos` asc
09:09:24 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:09:24 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:09:24 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:09:29 sql: delete from `section` where id=14
09:09:29 sql: update `section` set `pos`=0,`height`=35 where id=1
09:09:30 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
09:09:32 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:09:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:09:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:09:48 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:09:50 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:09:50 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:10:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:10:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:10:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
09:10:09 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,1,'{"align":"center","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
09:10:10 sql: update `section` set `height`=36,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:10:10 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:23 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:23 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:24 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:24 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:24 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:24 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:26 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:27 sql: update `section` set `height`=36,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:10:27 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:27 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:27 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:29 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:29 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
09:10:33 null: NULL object
09:10:33 sql: select * from `config` where id=1
09:10:33 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:10:33 null: NULL object
09:10:33 sql: select * from `user` where username='admin'
09:10:33 sql: select * from `page` where id=1 order by pos asc
09:10:33 sql: select * from `section` where page_id=1 order by `pos` asc
09:10:34 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:10:34 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:10:34 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:10:35 sql: update `section` set `height`=37,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
09:10:36 sql: update `section` set `height`=21,`content`='{"align":"center","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=15
09:11:45 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cdiv%3EEnter%20i%20formul%C3%A4r%20m%C3%A5ste%20trigga%20action%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
09:11:48 null: NULL object
09:11:48 sql: select * from `config` where id=1
09:11:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:11:48 null: NULL object
09:11:48 sql: select * from `user` where username='admin'
09:11:48 sql: select * from `page` where id=1 order by pos asc
09:11:48 sql: select * from `section` where page_id=1 order by `pos` asc
13:39:16 null: NULL object
13:39:16 sql: select * from `config` where id=1
13:39:16 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:39:16 sql: select * from `user` where username='admin'
13:39:16 null: NULL object
13:39:16 sql: select * from `page` where id=1 order by pos asc
13:39:16 sql: select * from `section` where page_id=1 order by `pos` asc
13:39:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:39:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:39:17 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:39:18 sql: update `section` set `height`=38,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
13:44:13 null: NULL object
13:44:13 sql: select * from `config` where id=1
13:44:13 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:44:13 null: NULL object
13:44:13 sql: select * from `user` where username='admin'
13:44:13 sql: select * from `page` where id=1 order by pos asc
13:44:13 sql: select * from `section` where page_id=1 order by `pos` asc
13:44:14 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:44:14 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:44:14 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:44:17 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:44:23 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:44:23 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:44:27 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
13:44:29 sql: update `section` set `height`=22,`content`='{"align":"center","text":"%3Cdiv%3EEnter%20i%20formul%C3%A4r%20m%C3%A5ste%20trigga%20action%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:44:29 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:44:33 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:44:33 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:44:36 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:44:36 sql: update `section` set `height`=39,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
13:44:36 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:44:40 null: NULL object
13:44:40 sql: select * from `config` where id=1
13:44:40 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:44:40 null: NULL object
13:44:40 sql: select * from `user` where username='admin'
13:44:40 sql: select * from `page` where id=1 order by pos asc
13:44:40 sql: select * from `section` where page_id=1 order by `pos` asc
13:44:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:44:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:44:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:44:41 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:44:42 sql: delete from `section` where id=16
13:44:42 sql: update `section` set `pos`=0,`height`=38 where id=1
13:44:42 sql: update `section` set `pos`=1,`height`=22 where id=15
13:44:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:44:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:44:47 sql: update `section` set `height`=23,`content`='{"align":"center","text":"%3Cdiv%3EEnter%20i%20formul%C3%A4r%20m%C3%A5ste%20trigga%20action%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:45:11 sql: update `section` set `height`=23,`content`='{"align":"center","text":"%3Cbr%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ERadera%20funkar%20inte%20f%C3%B6r%20nyskapad%20sektion%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:45:13 null: NULL object
13:45:13 sql: select * from `config` where id=1
13:45:13 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:45:13 null: NULL object
13:45:13 sql: select * from `user` where username='admin'
13:45:13 sql: select * from `page` where id=1 order by pos asc
13:45:13 sql: select * from `section` where page_id=1 order by `pos` asc
13:45:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:45:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:45:18 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:45:18 sql: update `section` set `height`=39,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
13:45:40 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:45:43 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:45:43 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:45:47 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
13:49:25 sql: update `section` set `height`=24,`content`='{"align":"center","text":"%3Cbr%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ERadera%20funkar%20inte%20f%C3%B6r%20nyskapad%20sektion%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:49:25 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
13:49:30 null: NULL object
13:49:30 sql: select * from `config` where id=1
13:49:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:49:31 null: NULL object
13:49:31 sql: select * from `user` where username='admin'
13:49:31 sql: select * from `page` where id=1 order by pos asc
13:49:31 sql: select * from `section` where page_id=1 order by `pos` asc
13:49:32 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:49:32 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:49:32 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:49:32 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:49:33 sql: delete from `section` where id=17
13:49:34 sql: update `section` set `pos`=0,`height`=38 where id=1
13:49:34 sql: update `section` set `pos`=1,`height`=24 where id=15
13:49:36 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:49:37 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:49:37 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:49:39 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
13:49:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:49:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:49:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:49:41 sql: update `section` set `height`=21,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20...fdf"}' where id=18
13:49:43 sql: update `section` set `height`=21,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20...fdf"}' where id=18
13:49:44 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cbr%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ERadera%20funkar%20inte%20f%C3%B6r%20nyskapad%20sektion%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:49:45 sql: delete from `section` where id=18
13:49:46 sql: update `section` set `pos`=0,`height`=38 where id=1
13:49:46 sql: update `section` set `pos`=1,`height`=24 where id=15
13:49:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:49:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
13:49:48 sql: update `section` set `height`=40,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
13:49:51 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cbr%3E%3Cdiv%3EEdit%20ska%20funka%20direkt%20i%20nyskapad%20sektion%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3ERadera%20funkar%20inte%20f%C3%B6r%20nyskapad%20sektion%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:49:59 sql: update `section` set `height`=25,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
13:56:53 null: NULL object
13:56:53 sql: select * from `config` where id=1
13:56:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
13:56:53 null: NULL object
13:56:53 sql: select * from `user` where username='admin'
13:56:53 sql: select * from `page` where id=1 order by pos asc
13:56:53 sql: select * from `section` where page_id=1 order by `pos` asc
13:56:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:56:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
13:56:54 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
13:56:58 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:57:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
13:57:02 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:01:02 null: NULL object
14:01:02 sql: select * from `config` where id=1
14:01:02 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:01:02 null: NULL object
14:01:02 sql: select * from `user` where username='admin'
14:01:02 sql: select * from `page` where id=1 order by pos asc
14:01:02 sql: select * from `section` where page_id=1 order by `pos` asc
14:01:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:01:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:01:03 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:01:05 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:01:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:01:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:01:08 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:01:12 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
14:02:01 null: NULL object
14:02:01 sql: select * from `config` where id=1
14:02:01 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:02:01 null: NULL object
14:02:01 sql: select * from `user` where username='admin'
14:02:01 sql: select * from `page` where id=1 order by pos asc
14:02:01 sql: select * from `section` where page_id=1 order by `pos` asc
14:02:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:02:03 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:02:03 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:02:04 sql: update `section` set `height`=41,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
14:02:06 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:02:09 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:02:09 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:02:09 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:02:14 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
14:02:14 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
14:02:22 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"url":"uploads%2F1%2F2021-04-05%2012-56-16.jpeg","shadow":true,"title":"Roland i färg"}')
14:02:49 null: NULL object
14:02:49 sql: select * from `config` where id=1
14:02:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:02:50 null: NULL object
14:02:50 sql: select * from `user` where username='admin'
14:02:50 sql: select * from `page` where id=1 order by pos asc
14:02:50 sql: select * from `section` where page_id=1 order by `pos` asc
14:02:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:02:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:02:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:02:51 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:02:55 sql: update `section` set `height`=21,`content`='{"align":"","text":"undefined"}' where id=19
14:02:57 sql: delete from `section` where id=19
14:02:57 sql: update `section` set `pos`=0,`height`=41 where id=1
14:02:57 sql: update `section` set `pos`=1,`height`=25 where id=15
14:02:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
14:02:59 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
14:03:01 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:03:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:03:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:03:04 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:03:12 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
14:03:12 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
14:03:14 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,2,'{"url":"uploads%2F1%2F2021-04-05%2012-56-16.jpeg","shadow":true,"title":"Roland i färg"}')
14:03:17 sql: update `section` set `height`=26,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
14:03:17 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:19 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:21 sql: update `section` set `height`=26,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
14:03:21 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:22 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:24 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:03:26 sql: update `section` set `height`=26,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
14:03:26 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:04:08 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:04:12 sql: update `section` set `height`=26,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
14:04:12 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
14:04:15 null: NULL object
14:04:15 sql: select * from `config` where id=1
14:04:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:04:15 null: NULL object
14:04:15 sql: select * from `user` where username='admin'
14:04:15 sql: select * from `page` where id=1 order by pos asc
14:04:15 sql: select * from `section` where page_id=1 order by `pos` asc
14:04:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:17 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:04:42 null: NULL object
14:04:42 sql: select * from `config` where id=1
14:04:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:04:42 null: NULL object
14:04:42 sql: select * from `user` where username='admin'
14:04:42 sql: select * from `page` where id=1 order by pos asc
14:04:42 sql: select * from `section` where page_id=1 order by `pos` asc
14:04:49 null: NULL object
14:04:49 sql: select * from `config` where id=1
14:04:49 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:04:49 null: NULL object
14:04:49 sql: select * from `user` where username='admin'
14:04:49 sql: select * from `page` where id=1 order by pos asc
14:04:49 sql: select * from `section` where page_id=1 order by `pos` asc
14:04:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:51 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:04:51 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:04:58 sql: update `section` set `pos`=0,`height`=41 where id=1
14:04:58 sql: update `section` set `pos`=1,`height`=20 where id=20
14:04:58 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:00 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3ERoland%20i%20f%C3%A4rg%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=20
14:05:01 sql: update `section` set `height`=27,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
14:05:02 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3ERoland%20i%20f%C3%A4rg%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=20
14:05:06 sql: update `section` set `pos`=0,`height`=39 where id=1
14:05:06 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:06 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:06 sql: update `section` set `pos`=0,`height`=38 where id=1
14:05:06 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:06 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:06 sql: update `section` set `pos`=0,`height`=37 where id=1
14:05:06 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:06 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:06 sql: update `section` set `pos`=0,`height`=36 where id=1
14:05:06 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:06 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:07 sql: update `section` set `pos`=0,`height`=35 where id=1
14:05:07 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:07 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:07 sql: update `section` set `pos`=0,`height`=34 where id=1
14:05:07 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:07 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:07 sql: update `section` set `pos`=0,`height`=33 where id=1
14:05:07 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:07 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:07 sql: update `section` set `pos`=0,`height`=32 where id=1
14:05:07 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:07 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:07 sql: update `section` set `pos`=0,`height`=30 where id=1
14:05:07 sql: update `section` set `pos`=1,`height`=20 where id=20
14:05:07 sql: update `section` set `pos`=2,`height`=25 where id=15
14:05:08 sql: update `section` set `height`=32,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
14:05:11 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3ERoland%20i%20f%C3%A4rg%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=20
14:05:13 sql: update `section` set `height`=21,`content`='{"align":"center","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3ERoland%20i%20f%C3%A4rg%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=20
14:05:15 null: NULL object
14:05:15 sql: select * from `config` where id=1
14:05:15 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:05:15 null: NULL object
14:05:15 sql: select * from `user` where username='admin'
14:05:15 sql: select * from `page` where id=1 order by pos asc
14:05:15 sql: select * from `section` where page_id=1 order by `pos` asc
14:05:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:17 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:17 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:05:28 null: NULL object
14:05:28 sql: select * from `config` where id=1
14:05:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:05:28 null: NULL object
14:05:28 sql: select * from `user` where username='admin'
14:05:29 sql: select * from `page` where id=1 order by pos asc
14:05:29 sql: select * from `section` where page_id=1 order by `pos` asc
14:05:29 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:29 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:29 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:05:29 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:06:22 null: NULL object
14:06:22 sql: select * from `config` where id=1
14:06:22 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:06:22 null: NULL object
14:06:22 sql: select * from `user` where username='admin'
14:06:22 sql: select * from `page` where id=1 order by pos asc
14:06:22 sql: select * from `section` where page_id=1 order by `pos` asc
14:06:23 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:06:23 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:06:23 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:06:23 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:06:56 null: NULL object
14:06:56 sql: select * from `config` where id=1
14:06:56 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:06:56 null: NULL object
14:06:56 sql: select * from `user` where username='admin'
14:06:56 sql: select * from `page` where id=1 order by pos asc
14:06:56 sql: select * from `section` where page_id=1 order by `pos` asc
14:07:41 null: NULL object
14:07:41 sql: select * from `config` where id=1
14:07:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:07:41 null: NULL object
14:07:41 sql: select * from `user` where username='admin'
14:07:41 sql: select * from `page` where id=1 order by pos asc
14:07:41 sql: select * from `section` where page_id=1 order by `pos` asc
14:07:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:07:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:07:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:07:45 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:07:50 null: NULL object
14:07:50 sql: select * from `config` where id=1
14:07:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:07:50 null: NULL object
14:07:50 sql: select * from `user` where username='admin'
14:07:51 sql: select * from `page` where id=1 order by pos asc
14:07:51 sql: select * from `section` where page_id=1 order by `pos` asc
14:10:12 null: NULL object
14:10:12 sql: select * from `config` where id=1
14:10:13 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:10:13 null: NULL object
14:10:13 sql: select * from `user` where username='admin'
14:10:13 sql: select * from `page` where id=1 order by pos asc
14:10:13 sql: select * from `section` where page_id=1 order by `pos` asc
14:10:57 null: NULL object
14:10:57 sql: select * from `config` where id=1
14:10:58 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:10:58 null: NULL object
14:10:58 sql: select * from `user` where username='admin'
14:10:58 sql: select * from `page` where id=1 order by pos asc
14:10:58 sql: select * from `section` where page_id=1 order by `pos` asc
14:11:11 null: NULL object
14:11:11 sql: select * from `config` where id=1
14:11:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:11:12 null: NULL object
14:11:12 sql: select * from `user` where username='admin'
14:11:12 sql: select * from `page` where id=1 order by pos asc
14:11:12 sql: select * from `section` where page_id=1 order by `pos` asc
14:12:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:12:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:12:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:12:11 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:12:14 sql: delete from `section` where id=20
14:12:14 sql: update `section` set `pos`=0,`height`=32 where id=1
14:12:14 sql: update `section` set `pos`=1,`height`=25 where id=15
14:12:16 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:12:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:12:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:12:20 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:12:27 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
14:12:27 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
14:13:41 null: NULL object
14:13:41 sql: select * from `config` where id=1
14:13:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
14:13:41 null: NULL object
14:13:41 sql: select * from `user` where username='admin'
14:13:41 sql: select * from `page` where id=1 order by pos asc
14:13:41 sql: select * from `section` where page_id=1 order by `pos` asc
14:13:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:13:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
14:13:43 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
14:13:46 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:13:51 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:13:51 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:13:51 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
14:13:57 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
14:13:57 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
14:14:01 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'picture',20,2,'{"url":"uploads%2F1%2F2021-04-05%2012-56-16.jpeg","shadow":true,"title":"dfasdfa"}')
17:25:28 null: NULL object
17:25:28 sql: select * from `config` where id=1
17:25:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:25:28 null: NULL object
17:25:28 sql: select * from `user` where username='admin'
17:25:28 sql: select * from `page` where id=1 order by pos asc
17:25:28 sql: select * from `section` where page_id=1 order by `pos` asc
17:30:07 null: NULL object
17:30:07 sql: select * from `config` where id=1
17:30:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:30:07 sql: select * from `user` where username='admin'
17:30:07 null: NULL object
17:30:08 sql: select * from `page` where id=1 order by pos asc
17:30:08 sql: select * from `section` where page_id=1 order by `pos` asc
17:30:10 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:30:10 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:30:10 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:30:10 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:30:11 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:12 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:13 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:13 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:15 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:28 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:28 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:52 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:30:52 sql: update `section` set `height`=21,`content`='{"align":"","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:31:02 sql: update `section` set `height`=21,`content`='{"align":"left","text":"%3Cfigure%20style%3D%22height%3A%20178px%3B%22%3E%3Cimg%20src%3D%22uploads%252F1%252F2021-04-05%252012-56-16.jpeg%22%20style%3D%22width%3A%2088px%3B%20height%3A%20132px%3B%20margin-top%3A%208px%3B%22%20class%3D%22shadow%22%3E%3Cfigcaption%3Edfasdfa%3C%2Ffigcaption%3E%3C%2Ffigure%3E"}' where id=21
17:31:43 null: NULL object
17:31:43 sql: select * from `config` where id=1
17:31:43 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:31:43 sql: select * from `user` where username='admin'
17:31:43 null: NULL object
17:31:43 sql: select * from `page` where id=1 order by pos asc
17:31:43 sql: select * from `section` where page_id=1 order by `pos` asc
17:31:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:31:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:31:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:31:45 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:32:18 null: NULL object
17:32:18 sql: select * from `config` where id=1
17:32:19 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:32:19 null: NULL object
17:32:19 sql: select * from `user` where username='admin'
17:32:19 sql: select * from `page` where id=1 order by pos asc
17:32:19 sql: select * from `section` where page_id=1 order by `pos` asc
17:32:50 null: NULL object
17:32:50 sql: select * from `config` where id=1
17:32:50 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:32:50 null: NULL object
17:32:50 sql: select * from `user` where username='admin'
17:32:50 sql: select * from `page` where id=1 order by pos asc
17:32:50 sql: select * from `section` where page_id=1 order by `pos` asc
17:39:31 null: NULL object
17:39:31 sql: select * from `config` where id=1
17:39:31 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:39:31 null: NULL object
17:39:31 sql: select * from `user` where username='admin'
17:39:31 sql: select * from `page` where id=1 order by pos asc
17:39:31 sql: select * from `section` where page_id=1 order by `pos` asc
17:39:33 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:39:33 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:39:33 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:39:35 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:39:40 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:39:40 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:39:40 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
17:39:45 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
17:39:45 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
17:39:53 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'picture',20,2,'{"url":"uploads%2F1%2F2021-04-05%2012-56-16.jpeg","shadow":true,"title":"Roland i färg"}')
17:39:56 sql: update `section` set `height`=26,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
17:39:56 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:56 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:56 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:57 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:57 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:57 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:57 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:58 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:58 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:58 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:39:58 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:40:00 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:40:00 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:40:02 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
17:40:04 null: NULL object
17:40:04 sql: select * from `config` where id=1
17:40:05 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:40:05 null: NULL object
17:40:05 sql: select * from `user` where username='admin'
17:40:05 sql: select * from `page` where id=1 order by pos asc
17:40:05 sql: select * from `section` where page_id=1 order by `pos` asc
17:40:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:40:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:40:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:40:07 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:40:07 sql: update `section` set `height`=21,`content`='{"align":"","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:40:09 sql: update `section` set `height`=21,`content`='{"align":"","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:40:09 sql: update `section` set `height`=21,`content`='{"align":"","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:40:11 sql: update `section` set `height`=21,`content`='{"align":"","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:40:52 sql: update `section` set `height`=21,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:40:52 sql: update `section` set `height`=21,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:41:19 sql: update `section` set `height`=21,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:41:19 sql: update `section` set `height`=21,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:42:14 null: NULL object
17:42:14 sql: select * from `config` where id=1
17:42:14 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:42:14 null: NULL object
17:42:14 sql: select * from `user` where username='admin'
17:42:14 sql: select * from `page` where id=1 order by pos asc
17:42:14 sql: select * from `section` where page_id=1 order by `pos` asc
17:42:15 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:42:15 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:42:15 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:42:15 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:42:15 sql: update `section` set `height`=22,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:42:22 sql: update `section` set `height`=22,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:42:22 sql: update `section` set `height`=22,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:42:28 sql: update `section` set `height`=22,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:42:28 sql: update `section` set `height`=22,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:47:37 null: NULL object
17:47:37 sql: select * from `config` where id=1
17:47:37 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:47:37 null: NULL object
17:47:37 sql: select * from `user` where username='admin'
17:47:38 sql: select * from `page` where id=1 order by pos asc
17:47:38 sql: select * from `section` where page_id=1 order by `pos` asc
17:47:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:47:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:47:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:47:40 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:47:41 sql: update `section` set `height`=23,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:47:41 sql: update `section` set `height`=23,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:47:47 sql: update `section` set `height`=23,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:47:48 sql: update `section` set `height`=27,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
17:47:59 sql: update `section` set `height`=23,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:47:59 sql: update `section` set `height`=23,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:48:44 null: NULL object
17:48:44 sql: select * from `config` where id=1
17:48:44 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:48:44 null: NULL object
17:48:44 sql: select * from `user` where username='admin'
17:48:44 sql: select * from `page` where id=1 order by pos asc
17:48:44 sql: select * from `section` where page_id=1 order by `pos` asc
17:48:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:48:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:48:46 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:48:46 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:48:46 sql: update `section` set `height`=24,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:48:51 sql: update `section` set `height`=24,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:48:51 sql: update `section` set `height`=24,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:51:34 null: NULL object
17:51:34 sql: select * from `config` where id=1
17:51:34 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:51:34 null: NULL object
17:51:34 sql: select * from `user` where username='admin'
17:51:34 sql: select * from `page` where id=1 order by pos asc
17:51:34 sql: select * from `section` where page_id=1 order by `pos` asc
17:51:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:51:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:51:35 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:51:35 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:51:35 sql: update `section` set `height`=25,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:51:40 sql: update `section` set `height`=25,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:51:40 sql: update `section` set `height`=25,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:54:12 null: NULL object
17:54:12 sql: select * from `config` where id=1
17:54:12 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:54:12 null: NULL object
17:54:12 sql: select * from `user` where username='admin'
17:54:12 sql: select * from `page` where id=1 order by pos asc
17:54:12 sql: select * from `section` where page_id=1 order by `pos` asc
17:54:13 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:54:13 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:54:13 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:54:13 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:54:13 sql: update `section` set `height`=26,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:55:33 null: NULL object
17:55:33 sql: select * from `config` where id=1
17:55:33 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:55:33 null: NULL object
17:55:33 sql: select * from `user` where username='admin'
17:55:33 sql: select * from `page` where id=1 order by pos asc
17:55:33 sql: select * from `section` where page_id=1 order by `pos` asc
17:55:34 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:55:34 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:55:34 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:55:34 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:55:34 sql: update `section` set `height`=27,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:56:21 null: NULL object
17:56:21 sql: select * from `config` where id=1
17:56:21 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:56:21 null: NULL object
17:56:21 sql: select * from `user` where username='admin'
17:56:21 sql: select * from `page` where id=1 order by pos asc
17:56:21 sql: select * from `section` where page_id=1 order by `pos` asc
17:56:22 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:56:22 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:56:22 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:56:22 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:56:22 sql: update `section` set `height`=28,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:57:07 null: NULL object
17:57:07 sql: select * from `config` where id=1
17:57:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:57:07 null: NULL object
17:57:07 sql: select * from `user` where username='admin'
17:57:07 sql: select * from `page` where id=1 order by pos asc
17:57:07 sql: select * from `section` where page_id=1 order by `pos` asc
17:57:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:08 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:57:08 sql: update `section` set `height`=29,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:57:41 null: NULL object
17:57:41 sql: select * from `config` where id=1
17:57:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:57:41 null: NULL object
17:57:41 sql: select * from `user` where username='admin'
17:57:41 sql: select * from `page` where id=1 order by pos asc
17:57:41 sql: select * from `section` where page_id=1 order by `pos` asc
17:57:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:41 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:41 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:57:42 sql: update `section` set `height`=28,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
17:57:42 sql: update `section` set `height`=30,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:57:52 null: NULL object
17:57:52 sql: select * from `config` where id=1
17:57:52 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
17:57:52 null: NULL object
17:57:52 sql: select * from `user` where username='admin'
17:57:52 sql: select * from `page` where id=1 order by pos asc
17:57:52 sql: select * from `section` where page_id=1 order by `pos` asc
17:57:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
17:57:53 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
17:57:53 sql: update `section` set `height`=31,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:58:26 sql: update `section` set `height`=31,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
17:58:28 sql: update `section` set `height`=33,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
17:58:29 sql: update `section` set `height`=29,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
18:01:54 null: NULL object
18:01:54 sql: select * from `config` where id=1
18:01:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:01:55 null: NULL object
18:01:55 sql: select * from `user` where username='admin'
18:01:55 sql: select * from `page` where id=1 order by pos asc
18:01:55 sql: select * from `section` where page_id=1 order by `pos` asc
18:03:05 null: NULL object
18:03:05 sql: select * from `config` where id=1
18:03:05 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:03:05 null: NULL object
18:03:05 sql: select * from `user` where username='admin'
18:03:05 sql: select * from `page` where id=1 order by pos asc
18:03:05 sql: select * from `section` where page_id=1 order by `pos` asc
18:03:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:03:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:03:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:03:07 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:03:42 null: NULL object
18:03:42 sql: select * from `config` where id=1
18:03:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:03:42 null: NULL object
18:03:42 sql: select * from `user` where username='admin'
18:03:42 sql: select * from `page` where id=1 order by pos asc
18:03:42 sql: select * from `section` where page_id=1 order by `pos` asc
18:05:35 null: NULL object
18:05:35 sql: select * from `config` where id=1
18:05:35 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:05:35 null: NULL object
18:05:35 sql: select * from `user` where username='admin'
18:05:35 sql: select * from `page` where id=1 order by pos asc
18:05:35 sql: select * from `section` where page_id=1 order by `pos` asc
18:08:53 null: NULL object
18:08:53 sql: select * from `config` where id=1
18:08:53 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:08:53 null: NULL object
18:08:53 sql: select * from `user` where username='admin'
18:08:53 sql: select * from `page` where id=1 order by pos asc
18:08:53 sql: select * from `section` where page_id=1 order by `pos` asc
18:11:03 null: NULL object
18:11:03 sql: select * from `config` where id=1
18:11:03 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:11:03 null: NULL object
18:11:03 sql: select * from `user` where username='admin'
18:11:03 sql: select * from `page` where id=1 order by pos asc
18:11:03 sql: select * from `section` where page_id=1 order by `pos` asc
18:11:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:11:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:11:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:11:11 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:11:13 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:11:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:11:15 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:11:17 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'text',20,3,'{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}')
18:11:27 sql: update `section` set `height`=34,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
18:12:24 null: NULL object
18:12:24 sql: select * from `config` where id=1
18:12:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:12:24 null: NULL object
18:12:24 sql: select * from `user` where username='admin'
18:12:24 sql: select * from `page` where id=1 order by pos asc
18:12:24 sql: select * from `section` where page_id=1 order by `pos` asc
18:12:27 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:12:27 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:12:27 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:12:27 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:12:27 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:12:31 sql: update `section` set `height`=35,`content`='{"align":"center","text":"%3Cdiv%3EV%C3%A4lommen%20till%20FrostByte%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Ch1%3ES%C3%B6ndag%3C%2Fh1%3E%3Cmark%3EJod%C3%A5%3C%2Fmark%3E%3Cbr%3E%3C%2Fdiv%3E%3Cbr%3E"}' where id=1
18:16:28 null: NULL object
18:16:28 sql: select * from `config` where id=1
18:16:28 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:16:28 null: NULL object
18:16:28 sql: select * from `user` where username='admin'
18:16:28 sql: select * from `page` where id=1 order by pos asc
18:16:28 sql: select * from `section` where page_id=1 order by `pos` asc
18:16:30 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:16:30 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:16:30 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:16:30 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:16:30 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:18:22 null: NULL object
18:18:22 sql: select * from `config` where id=1
18:18:22 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:18:22 null: NULL object
18:18:22 sql: select * from `user` where username='admin'
18:18:22 sql: select * from `page` where id=1 order by pos asc
18:18:22 sql: select * from `section` where page_id=1 order by `pos` asc
18:18:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:25 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:18:43 null: NULL object
18:18:43 sql: select * from `config` where id=1
18:18:43 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:18:43 null: NULL object
18:18:43 sql: select * from `user` where username='admin'
18:18:43 sql: select * from `page` where id=1 order by pos asc
18:18:43 sql: select * from `section` where page_id=1 order by `pos` asc
18:18:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:45 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:18:45 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:19:46 null: NULL object
18:19:46 sql: select * from `config` where id=1
18:19:46 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:19:46 null: NULL object
18:19:46 sql: select * from `user` where username='admin'
18:19:46 sql: select * from `page` where id=1 order by pos asc
18:19:47 sql: select * from `section` where page_id=1 order by `pos` asc
18:19:48 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:19:48 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:19:48 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:19:48 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:19:48 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:51:22 sql: update `section` set `height`=32,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg"}' where id=22
18:54:24 null: NULL object
18:54:24 sql: select * from `config` where id=1
18:54:24 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:54:24 null: NULL object
18:54:24 sql: select * from `user` where username='admin'
18:54:24 sql: select * from `page` where id=1 order by pos asc
18:54:24 sql: select * from `section` where page_id=1 order by `pos` asc
18:54:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:25 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:25 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
18:54:29 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
18:54:39 sql: update `section` set `height`=33,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
18:54:42 null: NULL object
18:54:42 sql: select * from `config` where id=1
18:54:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
18:54:42 null: NULL object
18:54:42 sql: select * from `user` where username='admin'
18:54:43 sql: select * from `page` where id=1 order by pos asc
18:54:43 sql: select * from `section` where page_id=1 order by `pos` asc
18:54:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:54 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
18:54:54 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
19:00:51 null: NULL object
19:00:51 sql: select * from `config` where id=1
19:00:51 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
19:00:51 null: NULL object
19:00:51 sql: select * from `user` where username='admin'
19:00:51 sql: select * from `page` where id=1 order by pos asc
19:00:51 sql: select * from `section` where page_id=1 order by `pos` asc
19:00:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:00:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:00:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:00:53 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:00:53 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
19:00:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:00:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:00:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:00:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:00:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:00:59 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:41 null: NULL object
19:01:41 sql: select * from `config` where id=1
19:01:41 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
19:01:41 null: NULL object
19:01:41 sql: select * from `user` where username='admin'
19:01:41 sql: select * from `page` where id=1 order by pos asc
19:01:41 sql: select * from `section` where page_id=1 order by `pos` asc
19:01:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:01:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:01:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:01:43 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
19:01:43 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
19:01:52 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
19:01:55 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:42 null: NULL object
20:47:42 sql: select * from `config` where id=1
20:47:42 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:47:42 sql: select * from `user` where username='admin'
20:47:42 null: NULL object
20:47:42 sql: select * from `page` where id=1 order by pos asc
20:47:42 sql: select * from `section` where page_id=1 order by `pos` asc
20:47:44 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:47:44 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:47:44 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:47:44 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:47:44 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
20:47:45 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:49 field => {

            if(!is_valid(field.listener, false)) field.listener = null;

            let div = document.createElement('div');
            div.classList.add('icol-40-60');

            let label = document.createElement('label');
            label.classList.add('ilabel');
            label.innerText = field.label;
            label.for = field.name;
            div.append(label);
            let inp = null;
            switch (field.type) {
                case FormType.Button:
                    div.removeChild(label);
                    inp = document.createElement('button');
                    inp.classList.add('ibutton');
                    inp.innerHTML = field.label;
                    inp.id = field.name;
                    if (field.listener === null) {
                        logg(`Buttons must have a listener in form "${title}"`);
                    }
                    inp.addEventListener('click', (e) => {
                        field.listener(field);
                    });
                    map[field.name]=field.name;

                    break;
                case FormType.Checkbox:
                    inp = document.createElement('input');
                    inp.classList.add('icheckbox');
                    inp.checked = field.value === null ? false : field.value;
                    inp.id = field.name;
                    inp.type = 'checkbox';
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value=e.target.checked;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Color:
                    div.style.display = 'grid';
                    label.style.height = '32px';

                    inp = document.createElement('input');
                    inp.classList.add('icolor');
                    inp.style.height = '32px;';
                    inp.type = 'color';
                    inp.value = field.value === null ? '#7f7f7f' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('input', (e) => {
                        map[field.name] = field.value = hexcolor_to_style(e.target.value);
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.File:
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], window['frostbyte'].page.id )
                            .then(
                                (resolve) => {
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Number:
                    inp = document.createElement('input');
                    inp.classList.add('inumber');
                    inp.id = field.name;
                    inp.type = 'number';
                    inp.step = field.step;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Image:
                    load_image_to_div(div, field.url, field.title, field.shadow, field.size);
                    inp = document.createElement('input');
                    inp.classList.add('ifile');
                    inp.id = field.id;
                    inp.type = 'file';
                    inp.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }});
                    map[field.name]=field.value;
                    break;
                case FormType.Label:
                    div.removeChild(label);
                    label = document.createElement('label');
                    label.classList.add('ilabel');
                    label.innerText = field.label;
                    label.id = field.name;

                    switch (field.align) {
                        case 'left':
                            div.classList.add('col-40-60');
                            div.appendChild(label);
                            div.appendChild(document.createElement('div'));
                            break;

                        case 'center':
                            div.appendChild(label);
                            break;

                        case 'right':
                            div.classList.add('col-40-60');
                            div.appendChild(document.createElement('div'));
                            div.appendChild(label);
                            break;
                    }
                    map[field.name]=field.label;
                    break;
                case FormType.List:
                    inp = document.createElement('select');
                    inp.classList.add('iselect');
                    inp.id = field.name;

                    for (let i = 0; i < field.items.length; i++) {
                        let opt = field.items[i];
                        let option = document.createElement('option');
                        option.classList.add('ioption');
                        if (field.selected && opt.value === field.selected) {
                            option.selected = true;
                        }
                        option.value = opt.value;
                        option.innerHTML = opt.text;

                        inp.appendChild(option);
                    }
                    inp.addEventListener('change', (e) => {
                        let target = e.target;
                        if (typeof target.options === 'undefined') {
                            target = e.target.parentElement;
                        }
                        if (target.selectedIndex != -1) {
                            map[field.name] = target.options[target.selectedIndex].value;
                            field.value = target.options[target.selectedIndex].value;
                            field.text = target.options[target.selectedIndex].innerText;
                            if (field.listener) field.listener(field);
                        }
                    });
                    map[field.name]= field.selected;
                    break;

                case FormType.Slider:
                    var val = document.createElement('label');
                    val.classList.add('ivalue');
                    val.for = field.name;
                    val.innerText = field.value === null ? (field.max - field.min) / 2 : field.value;

                    inp = document.createElement('input');
                    inp.classList.add('islider');
                    inp.type = 'range';
                    inp.min = field.min;
                    inp.max = field.max;
                    inp.id = field.name;
                    inp.value = field.value === null ? (field.max - field.min) / 2 : field.value;
                    inp.addEventListener('input', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                        val.innerText = e.target.value;
                    });
                    div.appendChild(val);
                    map[field.name]=field.value;
                    break;
                case FormType.Text:
                    inp = document.createElement('input');
                    inp.type = 'text';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Email:
                    inp = document.createElement('input');
                    inp.type = 'email';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;
                case FormType.Password:
                    inp = document.createElement('input');
                    inp.type = 'password';
                    inp.value = field.value === null ? '' : field.value;
                    inp.id = field.name;
                    inp.addEventListener('change', (e) => {
                        map[field.name]=field.value = e.target.value;
                        if (field.listener) field.listener(field);
                    });
                    map[field.name]=field.value;
                    break;

                default:
                    logg(`Okänd typ ${field.type} i ${title}`);
                    break;
            }
            if( inp ) {
                div.appendChild(inp);
                form.appendChild(div);
            }
        }: Undefined object
20:47:57 (e) => {
                        if (e.target.files && e.target.files[0]) {
                            let canvas = div.querySelector('canvas');
                            if (canvas) {
                                div.removeChild(canvas);
                            }
                            field.value = e.target.files[0].name;
                            if( !is_valid(field.title)) field.title = e.target.files[0].name;
                            upload(field.title, e.target.files[0], Global.page.id )
                            .then(
                                (resolve) => {
                                    load_image_to_div(div, resolve, field.title, field.shadow, field.size);
                                    map[field.name]= resolve;
                                    if (field.listener) field.listener(e);
                                });
                        }}: Undefined object
20:47:57 function draw_image(container, img, shadow = true, title = null, title_align = 'center') {

    title = !is_valid(title) ? null : title;
    title = title && title.length===0? null : title;

    let fig = document.createElement('figure');
    
    let caption = document.createElement('figcaption');
    caption.innerText = title === null ? '' : title;
    
    let containerWidth = container.offsetWidth;
    let containerHeight = container.offsetHeight-DRAW_IMAGE_SHADOW_SPACE;

    let imgWidth = img.width;
    let imgHeight = img.height;

    let widthRatio = containerWidth / imgWidth;
    let heightRatio = containerHeight / imgHeight;

    let scale = Math.min(widthRatio, heightRatio);
    
    let newWidth = imgWidth * scale;
    let newHeight = imgHeight * scale;
    // caption.style.width = newWidth + 'px';
    
    img.style.width = newWidth + 'px';
    img.style.height = newHeight + 'px';
    if( shadow ) {
        img.classList.add('shadow');
    }

    fig.appendChild(img);
    fig.appendChild(caption);
    container.appendChild(fig);
}: NULL object
20:48:03 sql: insert into `section` (`page_id`,`type`,`height`,`pos`,`content`) values (1,'imagetext',20,4,'{"url":"uploads%2F1%2F18403906_1291226840914678_2844336345605923134_o.jpg","shadow":true,"title":"fgdsfgdfg","text":"Du kan skriva mer senare ...","img_align":"left"}')
20:48:07 sql: update `section` set `height`=34,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:48:08 sql: update `section` set `height`=21,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=23
20:48:08 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
20:48:12 function mark_section_selected(section) {
    if (Global.user.valid) {
        let container = document.querySelector('main');

        for (let i = 0; i < container.childElementCount; i++) {
            let sec = container.children[i];
            sec.classList.remove('section-edit');
            if( is_same_section(Global.selected, sec) ) {
                let func = window[`leaving_${sec.getAttribute('data-type')}`];
                if( is_valid(func)) {
                    console.log(`Leaving ${sec.id}`);
                    func(sec);
                }
            }
        }
        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if( is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
20:48:17 null: NULL object
20:48:17 sql: select * from `config` where id=1
20:48:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:48:17 null: NULL object
20:48:17 sql: select * from `user` where username='admin'
20:48:17 sql: select * from `page` where id=1 order by pos asc
20:48:17 sql: select * from `section` where page_id=1 order by `pos` asc
20:48:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:48:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:48:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:48:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:48:18 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:48:18 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
20:49:06 null: NULL object
20:49:06 sql: select * from `config` where id=1
20:49:06 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:49:06 null: NULL object
20:49:06 sql: select * from `user` where username='admin'
20:49:06 sql: select * from `page` where id=1 order by pos asc
20:49:06 sql: select * from `section` where page_id=1 order by `pos` asc
20:49:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:49:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:49:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:49:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:49:08 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:49:08 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
20:49:11 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:11 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:11 sql: update `section` set `pos`=2,`height`=35 where id=22
20:49:11 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:11 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:11 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:11 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:11 sql: update `section` set `pos`=2,`height`=36 where id=22
20:49:11 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:11 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:13 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:13 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:13 sql: update `section` set `pos`=2,`height`=37 where id=22
20:49:13 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:13 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:13 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:13 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:13 sql: update `section` set `pos`=2,`height`=38 where id=22
20:49:13 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:13 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:14 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:14 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:14 sql: update `section` set `pos`=2,`height`=39 where id=22
20:49:14 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:14 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:14 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:14 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:14 sql: update `section` set `pos`=2,`height`=40 where id=22
20:49:14 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:14 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:14 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:14 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:14 sql: update `section` set `pos`=2,`height`=41 where id=22
20:49:14 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:14 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:14 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:14 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:14 sql: update `section` set `pos`=2,`height`=43 where id=22
20:49:14 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:14 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:15 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:15 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:15 sql: update `section` set `pos`=2,`height`=44 where id=22
20:49:15 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:15 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:17 sql: update `section` set `height`=45,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:49:18 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:18 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:18 sql: update `section` set `pos`=2,`height`=45 where id=22
20:49:18 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:18 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:19 sql: update `section` set `pos`=0,`height`=35 where id=1
20:49:19 sql: update `section` set `pos`=1,`height`=28 where id=15
20:49:19 sql: update `section` set `pos`=2,`height`=46 where id=22
20:49:19 sql: update `section` set `pos`=3,`height`=21 where id=23
20:49:19 sql: update `section` set `pos`=4,`height`=20 where id=24
20:49:26 sql: update `section` set `height`=48,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:49:28 sql: update `section` set `height`=22,`content`='{"align":"left","text":"Du%20kan%20skriva%20mer%20sedan%20..."}' where id=23
20:49:30 sql: update `section` set `height`=30,`content`='{"align":"center","text":"Picture%20n%C3%A4sta%3Cbr%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:11 sql: update `section` set `height`=30,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:13 sql: update `section` set `pos`=0,`height`=35 where id=1
20:50:13 sql: update `section` set `pos`=1,`height`=27 where id=15
20:50:13 sql: update `section` set `pos`=2,`height`=46 where id=22
20:50:13 sql: update `section` set `pos`=3,`height`=21 where id=23
20:50:13 sql: update `section` set `pos`=4,`height`=20 where id=24
20:50:14 sql: update `section` set `height`=29,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:15 sql: update `section` set `pos`=0,`height`=35 where id=1
20:50:15 sql: update `section` set `pos`=1,`height`=26 where id=15
20:50:15 sql: update `section` set `pos`=2,`height`=46 where id=22
20:50:15 sql: update `section` set `pos`=4,`height`=20 where id=24
20:50:15 sql: update `section` set `pos`=3,`height`=21 where id=23
20:50:17 sql: update `section` set `pos`=0,`height`=35 where id=1
20:50:17 sql: update `section` set `pos`=1,`height`=25 where id=15
20:50:17 sql: update `section` set `pos`=2,`height`=46 where id=22
20:50:17 sql: update `section` set `pos`=3,`height`=21 where id=23
20:50:17 sql: update `section` set `pos`=4,`height`=20 where id=24
20:50:18 sql: update `section` set `height`=26,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:20 sql: update `section` set `pos`=0,`height`=35 where id=1
20:50:20 sql: update `section` set `pos`=1,`height`=24 where id=15
20:50:20 sql: update `section` set `pos`=2,`height`=46 where id=22
20:50:20 sql: update `section` set `pos`=3,`height`=21 where id=23
20:50:20 sql: update `section` set `pos`=4,`height`=20 where id=24
20:50:21 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:42 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:48 sql: delete from `section` where id=1
20:50:48 sql: update `section` set `pos`=0,`height`=24 where id=15
20:50:48 sql: update `section` set `pos`=1,`height`=46 where id=22
20:50:48 sql: update `section` set `pos`=2,`height`=21 where id=23
20:50:48 sql: update `section` set `pos`=3,`height`=20 where id=24
20:50:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:50:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:50:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:50:50 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:50:50 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:51 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3EPicture%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:56 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:50:57 sql: update `section` set `height`=25,`content`='{"align":"center","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:51:09 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:51:46 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20focus%20n%C3%A4r%20man%20flytta%20upp%2Fned%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:51:49 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:51:49 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:51:52 sql: update `section` set `height`=48,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:51:56 sql: update `section` set `pos`=0,`height`=24 where id=15
20:51:56 sql: update `section` set `pos`=1,`height`=21 where id=23
20:51:56 sql: update `section` set `pos`=2,`height`=46 where id=22
20:51:56 sql: update `section` set `pos`=3,`height`=20 where id=24
20:51:59 sql: update `section` set `height`=48,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:52:07 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:07 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:07 sql: update `section` set `pos`=2,`height`=45 where id=22
20:52:07 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:07 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:07 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:07 sql: update `section` set `pos`=2,`height`=44 where id=22
20:52:07 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:07 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:07 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:07 sql: update `section` set `pos`=2,`height`=43 where id=22
20:52:07 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:08 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:08 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:08 sql: update `section` set `pos`=2,`height`=41 where id=22
20:52:08 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:08 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:08 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:08 sql: update `section` set `pos`=2,`height`=40 where id=22
20:52:08 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:08 sql: update `section` set `pos`=0,`height`=24 where id=15
20:52:08 sql: update `section` set `pos`=1,`height`=21 where id=23
20:52:08 sql: update `section` set `pos`=2,`height`=39 where id=22
20:52:08 sql: update `section` set `pos`=3,`height`=20 where id=24
20:52:09 sql: update `section` set `height`=41,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:52:12 sql: update `section` set `height`=41,`content`='{"align":"left","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:52:13 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:52:55 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:52:57 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:52:59 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:53:01 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:53:01 sql: update `section` set `height`=25,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
20:53:04 null: NULL object
20:53:04 sql: select * from `config` where id=1
20:53:04 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
20:53:04 sql: select * from `user` where username='admin'
20:53:04 null: NULL object
20:53:04 sql: select * from `page` where id=1 order by pos asc
20:53:04 sql: select * from `section` where page_id=1 order by `pos` asc
20:53:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:53:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:53:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:53:07 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
20:53:07 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
20:53:09 sql: delete from `section` where id=23
20:53:09 sql: update `section` set `pos`=0,`height`=25 where id=15
20:53:09 sql: update `section` set `pos`=1,`height`=41 where id=22
20:53:09 sql: update `section` set `pos`=2,`height`=20 where id=24
20:53:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:53:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:53:11 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: NULL object
20:53:16 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
20:53:23 sql: delete from `section` where id=24
20:53:23 sql: update `section` set `pos`=0,`height`=25 where id=15
20:53:23 sql: update `section` set `pos`=1,`height`=41 where id=22
09:06:58 null: NULL object
09:06:58 sql: select * from `config` where id=1
09:06:58 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:06:58 null: NULL object
09:06:58 sql: select * from `user` where username=0
09:06:58 sql: select * from `page` where id=1 order by pos asc
09:06:58 sql: select * from `section` where page_id=1 order by `pos` asc
09:07:00 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:07:00 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:07:00 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:07:01 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:07:01 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:07:06 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:09:04 null: NULL object
09:09:04 sql: select * from `config` where id=1
09:09:04 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:09:04 sql: select * from `user` where username=0
09:09:04 sql: select * from `page` where id=1 order by pos asc
09:09:04 null: NULL object
09:09:04 sql: select * from `section` where page_id=1 order by `pos` asc
09:09:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:09:05 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:09:05 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:09:06 sql: update `section` set `height`=26,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
09:09:09 sql: update `section` set `pos`=0,`height`=42 where id=22
09:09:09 sql: update `section` set `pos`=1,`height`=25 where id=15
09:09:13 sql: update `section` set `pos`=0,`height`=25 where id=15
09:09:13 sql: update `section` set `pos`=1,`height`=42 where id=22
09:09:17 sql: update `section` set `pos`=0,`height`=42 where id=22
09:09:17 sql: update `section` set `pos`=1,`height`=25 where id=15
09:09:18 sql: update `section` set `pos`=0,`height`=25 where id=15
09:09:18 sql: update `section` set `pos`=1,`height`=42 where id=22
09:09:20 sql: update `section` set `height`=43,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:09:54 sql: update `section` set `height`=43,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:09:57 sql: update `section` set `pos`=0,`height`=25 where id=15
09:09:57 sql: update `section` set `pos`=1,`height`=43 where id=22
09:09:59 sql: update `section` set `height`=44,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:10:01 sql: update `section` set `pos`=0,`height`=25 where id=15
09:10:01 sql: update `section` set `pos`=1,`height`=44 where id=22
09:10:02 sql: update `section` set `height`=45,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:11:10 sql: update `section` set `height`=45,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:11:11 sql: update `section` set `height`=45,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:11:16 sql: update `section` set `pos`=0,`height`=25 where id=15
09:11:16 sql: update `section` set `pos`=1,`height`=45 where id=22
09:11:34 sql: update `section` set `height`=47,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:12:48 null: NULL object
09:12:48 sql: select * from `config` where id=1
09:12:48 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:12:48 null: NULL object
09:12:48 sql: select * from `page` where id=1 order by pos asc
09:12:48 sql: select * from `user` where username=0
09:12:48 sql: select * from `section` where page_id=1 order by `pos` asc
09:12:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:12:49 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:12:49 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:12:52 sql: update `section` set `pos`=0,`height`=25 where id=15
09:12:52 sql: update `section` set `pos`=1,`height`=45 where id=22
09:12:52 sql: update `section` set `height`=47,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:16 sql: update `section` set `height`=47,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:30 sql: update `section` set `height`=47,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:33 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:33 sql: update `section` set `pos`=1,`height`=44 where id=22
09:13:33 sql: update `section` set `height`=46,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:34 sql: update `section` set `height`=46,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:41 sql: update `section` set `height`=46,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:45 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:45 sql: update `section` set `pos`=1,`height`=43 where id=22
09:13:45 sql: update `section` set `height`=45,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:48 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:48 sql: update `section` set `pos`=1,`height`=42 where id=22
09:13:48 sql: update `section` set `height`=44,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:48 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:48 sql: update `section` set `pos`=1,`height`=41 where id=22
09:13:48 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:49 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:49 sql: update `section` set `pos`=1,`height`=40 where id=22
09:13:49 sql: update `section` set `height`=41,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:49 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:49 sql: update `section` set `pos`=1,`height`=39 where id=22
09:13:49 sql: update `section` set `height`=40,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:49 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:49 sql: update `section` set `pos`=1,`height`=37 where id=22
09:13:49 sql: update `section` set `height`=39,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:49 sql: update `section` set `pos`=0,`height`=25 where id=15
09:13:49 sql: update `section` set `pos`=1,`height`=36 where id=22
09:13:49 sql: update `section` set `height`=38,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:50 sql: update `section` set `height`=38,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:56 sql: update `section` set `height`=38,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:13:58 sql: update `section` set `height`=38,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:02 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:02 sql: update `section` set `pos`=1,`height`=35 where id=22
09:14:02 sql: update `section` set `height`=37,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:05 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:05 sql: update `section` set `pos`=1,`height`=34 where id=22
09:14:05 sql: update `section` set `height`=35,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:23 sql: update `section` set `height`=35,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:25 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:25 sql: update `section` set `pos`=1,`height`=33 where id=22
09:14:25 sql: update `section` set `height`=34,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:27 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:27 sql: update `section` set `pos`=1,`height`=32 where id=22
09:14:27 sql: update `section` set `height`=33,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:29 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:29 sql: update `section` set `pos`=1,`height`=33 where id=22
09:14:29 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:29 sql: update `section` set `pos`=1,`height`=34 where id=22
09:14:29 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:29 sql: update `section` set `pos`=1,`height`=35 where id=22
09:14:30 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:30 sql: update `section` set `pos`=1,`height`=36 where id=22
09:14:30 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:30 sql: update `section` set `pos`=1,`height`=37 where id=22
09:14:30 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:30 sql: update `section` set `pos`=1,`height`=39 where id=22
09:14:30 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:30 sql: update `section` set `pos`=1,`height`=40 where id=22
09:14:31 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:31 sql: update `section` set `pos`=1,`height`=41 where id=22
09:14:32 sql: update `section` set `height`=42,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:14:34 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:34 sql: update `section` set `pos`=1,`height`=42 where id=22
09:14:35 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:35 sql: update `section` set `pos`=1,`height`=43 where id=22
09:14:35 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:35 sql: update `section` set `pos`=1,`height`=44 where id=22
09:14:35 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:35 sql: update `section` set `pos`=1,`height`=45 where id=22
09:14:36 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:36 sql: update `section` set `pos`=1,`height`=46 where id=22
09:14:36 sql: update `section` set `pos`=0,`height`=25 where id=15
09:14:36 sql: update `section` set `pos`=1,`height`=48 where id=22
09:14:57 sql: update `section` set `height`=49,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:15:39 null: NULL object
09:15:39 sql: select * from `config` where id=1
09:15:39 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:15:39 null: NULL object
09:15:39 sql: select * from `user` where username=0
09:15:39 sql: select * from `page` where id=1 order by pos asc
09:15:39 sql: select * from `section` where page_id=1 order by `pos` asc
09:15:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:15:40 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:15:40 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:17:54 null: NULL object
09:17:54 sql: select * from `config` where id=1
09:17:54 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
09:17:54 null: NULL object
09:17:54 sql: select * from `user` where username=0
09:17:54 sql: select * from `page` where id=1 order by pos asc
09:17:54 sql: select * from `section` where page_id=1 order by `pos` asc
09:17:56 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:17:56 function is_same_section(s1, s2) {
    if( !is_valid(s1)) return false;
    if( !is_valid(s2)) return false;
    return s1.id === s2.id;
}: Undefined object
09:17:56 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
09:18:00 sql: update `section` set `pos`=0,`height`=25 where id=15
09:18:00 sql: update `section` set `pos`=1,`height`=47 where id=22
09:18:00 sql: update `section` set `height`=49,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:18:01 sql: update `section` set `pos`=0,`height`=25 where id=15
09:18:01 sql: update `section` set `pos`=1,`height`=47 where id=22
09:18:01 sql: update `section` set `height`=26,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
09:18:04 sql: update `section` set `pos`=0,`height`=47 where id=22
09:18:04 sql: update `section` set `pos`=1,`height`=25 where id=15
09:18:04 sql: update `section` set `height`=49,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
09:18:11 sql: update `section` set `pos`=0,`height`=25 where id=15
09:18:11 sql: update `section` set `pos`=1,`height`=47 where id=22
09:18:11 sql: update `section` set `height`=26,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
10:29:07 null: NULL object
10:29:07 sql: select * from `config` where id=1
10:29:07 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:29:07 null: NULL object
10:29:07 sql: select * from `user` where username=0
10:29:07 sql: select * from `page` where id=1 order by pos asc
10:29:07 sql: select * from `section` where page_id=1 order by `pos` asc
10:29:07 sec => {
                    let id = parseInt(sec.id);
                    let type = sec.type;
                    let func = window[`draw_${type}`];
                    if (is_valid(func)) {
                        let secdiv = document.createElement('section');
                        secdiv.id = `s-${id}`;
                        secdiv.style.height = `${sec.height}vh`;
                        secdiv.setAttribute('data-type', type);
                        secdiv.setAttribute('data-page-id', sec.page_id);
                        container.appendChild(secdiv);
                        func(secdiv, JSON.parse(sec.content));
                    }
                }: Undefined object
10:29:13 function mark_section_selected(section) {
    if (Global.user.valid && is_valid(section )) {

        if( is_valid(Global.selected) && !is_same_section(Global.selected,section) ) {
            let func = window[`leaving_${Global.selected.getAttribute('data-type')}`];
            if (is_valid(func)) {
                console.log(`Leaving ${Global.selected.id}`);
                func(Global.selected);
           }
        }

        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if (is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
10:29:13 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
10:29:17 null: NULL object
10:29:17 sql: select * from `config` where id=1
10:29:17 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:29:17 null: NULL object
10:29:17 sql: select * from `user` where username=0
10:29:17 sql: select * from `page` where id=1 order by pos asc
10:29:17 sql: select * from `section` where page_id=1 order by `pos` asc
10:29:17 sec => {
                    let id = parseInt(sec.id);
                    let type = sec.type;
                    let func = window[`draw_${type}`];
                    if (is_valid(func)) {
                        let secdiv = document.createElement('section');
                        secdiv.id = `s-${id}`;
                        secdiv.style.height = `${sec.height}vh`;
                        secdiv.setAttribute('data-type', type);
                        secdiv.setAttribute('data-page-id', sec.page_id);
                        container.appendChild(secdiv);
                        func(secdiv, JSON.parse(sec.content));
                    }
                }: Undefined object
10:30:55 null: NULL object
10:30:55 sql: select * from `config` where id=1
10:30:55 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:30:55 null: NULL object
10:30:55 sql: select * from `user` where username=0
10:30:55 sql: select * from `page` where id=1 order by pos asc
10:30:55 sql: select * from `section` where page_id=1 order by `pos` asc
10:30:56 function mark_section_selected(section) {
    if (Global.user.valid && is_valid(section )) {

        if( is_valid(Global.selected) && !is_same_section(Global.selected,section) ) {
            let func = window[`leaving_${Global.selected.getAttribute('data-type')}`];
            if (is_valid(func)) {
                console.log(`Leaving ${Global.selected.id}`);
                func(Global.selected);
           }
        }

        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if (is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
10:30:56 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
10:30:58 sql: update `section` set `pos`=0,`height`=27 where id=15
10:30:58 sql: update `section` set `pos`=1,`height`=48,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
10:30:59 sql: update `section` set `pos`=0,`height`=27,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
10:30:59 sql: update `section` set `pos`=1,`height`=48 where id=22
10:31:02 sql: update `section` set `pos`=0,`height`=27 where id=15
10:31:02 sql: update `section` set `pos`=1,`height`=48,`content`='{"align":"center","url":"http%3A%2F%2Flocalhost%3A8080%2Fuploads%2F1%2F2021-04-05%252012-56-16.jpeg","shadow":true,"title":"Roland i färg!"}' where id=22
10:31:13 sql: update `section` set `pos`=0,`height`=27,`content`='{"align":"left","text":"%3Cdiv%3E%3Ch3%3EPicture%3C%2Fh3%3E%3C%2Fdiv%3E%3Cdiv%3EBilden%20storlek%20%C3%B6kar%2Fminskar%20inte%20n%C3%A4r%20man%20%C3%A4ndrar%20storlek%20p%C3%A5%20sektionen%3C%2Fdiv%3E%3Cdiv%3E%3C%2Fdiv%3E%3Ch3%3E%3Cdiv%3E%3Cbr%3E%3C%2Fdiv%3E%3Cdiv%3EAllm%C3%A4nt%3C%2Fdiv%3E%3C%2Fh3%3E%3Cdiv%3E%3C%2Fdiv%3E%3Cdiv%3ESektionen%20tappar%20fokus%20n%C3%A4r%20man%20flytta%20upp%2Fned%20eller%20f%C3%B6r%C3%A4ndrar%20storlek%20(%20f%C3%B6rmodligen%20n%C3%A4r%20man%20g%C3%B6r%20n%C3%A5got%20ur%20Sektionsmenyn)%3Cbr%3E%3C%2Fdiv%3E"}' where id=15
10:31:13 sql: update `section` set `pos`=1,`height`=48 where id=22
10:36:52 null: NULL object
10:36:52 sql: select * from `config` where id=1
10:36:52 sql: select `id`,`title` from `page` where `parent`=0 order by `pos` asc
10:36:52 null: NULL object
10:36:52 sql: select * from `user` where username=0
10:36:52 sql: select * from `page` where id=1 order by pos asc
10:36:52 sql: select * from `section` where page_id=1 order by `pos` asc
10:36:53 function mark_section_selected(section) {
    if (Global.user.valid && is_valid(section )) {

        if( is_valid(Global.selected) && !is_same_section(Global.selected,section) ) {
            let func = window[`leaving_${Global.selected.getAttribute('data-type')}`];
            if (is_valid(func)) {
                console.log(`Leaving ${Global.selected.id}`);
                func(Global.selected);
           }
        }

        Global.selected = section;
        section.classList.add('section-edit');
        let func = window[`entering_${section.getAttribute('data-type')}`];
        if (is_valid(func)) {
            console.log(`Entering ${section.id}`);
            func(section);
        }
    }
}: Undefined object
10:36:53 function show_tools(title, tools) {

    if (Global.user.valid) {
        let toolbar = document.getElementById('toolbar');
        toolbar.style.display = 'grid';

        let fieldset = document.getElementById('added-tools');
        if (is_valid(fieldset)) {
            toolbar.removeChild(fieldset);
        }

        fieldset = document.createElement('fieldset');
        fieldset.id = 'added-tools';
        let legend = document.createElement('legend');
        legend.innerText = title;
        fieldset.appendChild(legend);

        tools.forEach(tool => {
            tb_add(fieldset, '#ffc0ff', tool.title, tool.func);
        });

        toolbar.appendChild(fieldset);
    }
}: NULL object
